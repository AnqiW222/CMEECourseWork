Starting code feedback for Anqi, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.61 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, .git, week1, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*.tmp
*.log
.DS_Store
*/sandbox
.vscode
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Anqi's CMEE Coursework Repository
This README file contains details about the modules within Anqi Wang's (aw222@ic.ac.uk) CMEE Coursework. This coursework contributes towards the fulfilment of MSc Computational Methods in Ecology and Evolution (CMEE) at Imperial College London. <br />

Many of the task requirements can be found at https://mhasoba.github.io/TheMulQuaBio/intro.htm


## Contents
### Week 1: UNIX, Shell scription, LaTeX and Version Control with Git
**Summary:** A brief introduction of the Multilingual Quantitative Biological Methods, UNIX basic knowledge, Introductory shell scripting exercises, Produce scientific documents with LaTeX, and Use version control (Git) to share the files with others<br />
**Language Use:** Bash, LaTex

---

### Week 2: 
**Summary:** Introduction to writing Python scripts/programs<br />
**Language Use:** Python, Bash

---

## Language Versions
**Python:** 3.9.12 <br />
**R:** 4.2.1 <br />
**bash:** 3.2 <br />
**LaTeX:** 3.141592653-2.6-1.40.24 (TeX Live 2022) <br />
**Jupyter:** Notebook 6.4.8 <br />

All code has been written on a MacOS version 12.6 and any dependencies are detailed below the script names within weekly README files


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: week1, week2

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, data, results

Found the following files: .gitignore, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework - week 2:

This README file contains details about the scripts from in-classwork and practicals for the second week.

## Description
More information about the python scripts and programs for coursework in **Biological Computing in Python I** section can be found in the Computing Chapter of the book [The Mulitilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/intro.html)

## Language

Python

## Dependencies
For some scripts (e.g. debugme.py) in this directory requires [pdb](https://docs.python.org/3/library/pdb.html), it can be installed by:

```bash
pip3 install pdb
```

For the python program (e.g. align_seqs.py) in this directory requires [pandas](https://pandas.pydata.org) installation is required by:

```bash
pip3 install --update pip
pip3 install pandas
```

_The installation commands are used for MacOS, may varied with the different operating system._

## Python

#### align_seqs.py
<font size=2>**Summary:** Find the best alignment for two specific DNA sequences such that they have as many bases matching as possible.<br />
**Input:** n/a <br />
**Dependencies:** pandas, sys, io <br />
**Output:** Saves to align_seqs_results.txt file in results.<br />
**Running Instructions:** Under ipython: run align_seqs.py <br /><br /></font>

#### basic_csv.py:
<font size=2>**Summary:** Using the csv package. <br />
**Input:** n/a <br />
**Dependencies:** csv <br />
**Output:** Result prints to terminal <br />
**Running Instructions:** Under ipython: run basic_csv.py <br /><br /></font>


#### basic_io1.py:
<font size=2>**Summary:** Example of importing and exporting data in python; Prints lines from a file. <br />
**Input:** n/a <br />
**Output:** Result prints in terminal. <br />
**Running Instructions:** Under ipython: run basic_io1.py <br /><br /></font>

#### basic_io2.py:
<font size=2>**Summary:** Save data to a file.<br />
**Input:** n/a <br />
**Output:** test.txt in sandbox. <br />
**Running Instructions:** Under ipython: run basic_io2.py </font>

#### basic_io3:
<font size=2>**Summary:** Store/save an object for later use. <br />
**Input:** 1 n/a <br />
**Dependencies:** pickle <br />
**Output:** testp.p in sandbox. <br />
**Running Instructions:** Under ipython: run basic_io3.py <br /><br /></font>

#### boilerplate.py:
<font size=2>**Summary:** Template for python programs.<br />
**Input:** n/a <br />
**Dependencies:** sys <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run boilerplate.py <br /><br /></font>

#### cfexercises1.py:
<font size=2>**Summary:** Introducion of conditionals and functions. <br />
**Input:** n/a <br />
**Dependencies:** sys <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run cfexercises1.py <br /><br /></font>

#### cfexercises2.py:
<font size=2>**Summary:** Examples of loops and conditionals combined. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run cfexercises2.py <br /><br /></font>

#### control_flow.py:
<font size=2>**Summary:** Create various functions which analyse numbers using control flow tools. <br />
**Input:** n/a <br />
**Dependencies:** sys <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run control_flow.py <br /><br /></font>

#### debugme.py:
<font size=2>**Summary:** Example of buggy function for debugging.<br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run debugme.py <br /><br /></font>

#### dictionary.py:
<font size=2>**Summary:** Populate a dictionary derived from taxa so that it maps order names to sets of taxa. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run dictionary.py <br /><br /></font>

#### lc1.py:
<font size=2>**Summary:** Using list comprehensions and loops to make lists from bird data. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run lc1.py <br /><br /></font>

#### lc2.py:
<font size=2>**Summary:** Use list comprehensions and loops to make lists from rainfall data. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run lc2.py <br /><br /></font>

#### loops.py:
<font size=2>**Summary:** Examples of for and while loops. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run loops.py <br /><br /></font>

#### MyExampleScript.py:
<font size=2>**Summary:** Learning to run python scripts. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run MyExampleScript.py <br /><br /></font>

#### oaks_debugme.py:
<font size=2>**Summary:** Understand and debug Oaks_debugme.py; write and modify doctests appropriately. <br />
**Input:** n/a <br />
**Dependencies:** csv, sys, doctest <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run oaks_dubugme.py <br /><br /></font>

#### oaks.py:
<font size=2>**Summary:** Examples of comprehensions. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run oaks.py <br /><br /></font>

#### scope.py:
<font size=2>**Summary:** Examples of variable scope and global variables. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run scope.py <br /><br /></font>

#### sysargv.py:
<font size=2>**Summary:** Explains sys.argv in a practical way. <br />
**Input:** Various Arguments <br />
**Dependencies:** sys <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run sysargv.py <br /><br /></font>

#### test_control_flow.py:
<font size=2>**Summary:** Introduction of unit testing, contains simple tests for each function embedded in the docstring; functions which exemplify the use of control statements. <br />
**Input:** n/a <br />
**Dependencies:** sys, doctest <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run test_control_flow.py -v <br /><br /></font>

#### tuple.py:
<font size=2>**Summary:** Print out items from a tuple. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run tuple.py <br /><br /></font>

#### using_name.py:
<font size=2>**Summary:** Example of use of __name__=='__main__' and using_name <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** under ipython: run using_name.py <br /><br /></font>


## Author & Contact

<font size=2>**Name:** ANQI WANG<br />
**Email:** aw222@ic.ac.uk</font>
**********************************************************************

Results directory is empty - good! 

Found 22 code files: MyExampleScript.py, sysargv.py, tuple.py, basic_io3.py, oaks.py, lc1.py, control_flow.py, dictionary.py, using_name.py, cfexercises1.py, boilerplate.py, cfexercises2.py, lc2.py, debugme.py, test_control_flow.py, align_seqs.py, basic_csv.py, basic_io2.py, scope.py, basic_io1.py, loops.py, oaks_debugme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
def foo(x):
    x *= x
    print (x)

foo (2)
**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.03551s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))


**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 95.5

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.04189s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.

for x in birds:
    print("latin name:", x[0], "; common name:", x[1], "; mass:", x[2])
**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
latin name: Passerculus sandwichensis ; common name: Savannah sparrow ; mass: 18.7
latin name: Delichon urbica ; common name: House martin ; mass: 19
latin name: Junco phaeonotus ; common name: Yellow-eyed junco ; mass: 19.5
latin name: Junco hyemalis ; common name: Dark-eyed junco ; mass: 19.6
latin name: Tachycineata bicolor ; common name: Tree swallow ; mass: 20.2

**********************************************************************

Code ran without errors

Time consumed = 0.03748s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p', 'wb')
pickle.dump(my_dictionary, f)
f.close()

# Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 91.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/basic_io3.py", line 9, in <module>
    f = open('../sandbox/testp.p', 'wb')
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testp.p'

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
## Finds just those taxa that are oak trees  from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraes',
        ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

## Using fo loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

## Using List comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

## Get names in UPPER CASE using for loops
oaks_loops = set ()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

## get names in Upper CASe using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 89.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus petraes', 'Quercus cerris', 'Quercus robur'}
{'Quercus petraes', 'Quercus cerris', 'Quercus robur'}
{'QUERCUS CERRIS', 'QUERCUS PETRAES', 'QUERCUS ROBUR'}
{'QUERCUS CERRIS', 'QUERCUS PETRAES', 'QUERCUS ROBUR'}

**********************************************************************

Code ran without errors

Time consumed = 0.03930s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'boilerplate'
__author__ = 'ANQI WANG (aw222@ic.ac.uk)'
__version__ = '3.10.7'
__license__ = "None"

from re import I

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

# Methods 1
birds_latin_names = [i[0] for i in birds]
birds_common_names = [i[1] for i in birds]
mean_body_masses = [i[2] for i in birds]

# Methods 2
BirdsLatinNames = [x for x, y, z in birds]
BirdsCommonNames = [y for x, y, z in birds]
MeanBodyMasses = [z for x, y, z in birds]

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 
LatinNames = []
CommenNames = []
MeanBodyMasses_2 = []

for i in birds:
    LatinNames.append(i[0])
    CommenNames.append(i[1])
    MeanBodyMasses_2.append(i[2])

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 87.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.04879s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'control_flow'
__author__ = 'ANQI WANG (aw222@ic.ac.uk)'
__version__ = '3.10.7'
__license__ = "None"

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return f"No divisor found for {x}!" # Each function can return a value or a variable.
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor") 
            return False
    print(f"{x} is a prime!")
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 86.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.03980s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia'),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocßephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. OR, 'Chiroptera': {'Myotis
#  lucifugus'} ... etc

#### Your solution here #### 
#del(dict)
#taxa_dic = dict(taxa)


# Method 1
taxa_dic = {}
# j = 0
for i in taxa:
        taxa_dic.setdefault(i[1],set()).add(i[0])
        # print(j)
        # j += 1
        # print(taxa_dic)
print(taxa_dic)

# Method 2
taxa_dic_dc = {x[1]: set([y[0] for y in taxa if y[1] == x[1]]) for x in taxa}

    

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
#{x[1]: [[y[0] for y in taxa if ] for x in taxa} 

#### Your solution here #### 

**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.0

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Peromyscus crinitus', 'Cleithrionomys rutilus', 'Gerbillus henleyi', 'Mus domesticus'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Arctocßephalus gazella', 'Lyacon pictus', 'Canis lupus'}}

**********************************************************************

Code ran without errors

Time consumed = 0.05008s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is being run by itself!')
else:
    print('I am being imported from another script/program/module!')

print("This module's name is: " + __name__)
**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 82.0

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself!
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.05005s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'cfexercises1'
__author__ = 'ANQI WANG (aw222@ic.ac.uk)'
__version__ = '3.10.7'
__license__ = "None"

import sys

def foo_1(x):
    """define a function that return the square root of x"""
    return x ** 0.5

def foo_2(x,y):
    """define a function contains two arguement x and y, and return the bigger number"""
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    """define a function contains three arguments x, y and z, and made the biggest number to end the sequence"""
    if x > y:
        tmp = y # tmp refers to the space to store the tuple during the swap
        y = x
        x = tmp
    if y > z:
        tmp = y
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x):
    """define a function calculte the factorial of x"""
    result = 1
    for i in range(1, x+1):
        result = result * i
    return  result

def foo_5(x):
    """define a recursive function when x==1"""
    if x == 1:
        return 1
    return x * foo_5(x -1) # runs as a loop untile x=1, then return the value step by step back to the order

def foo_6(x):
    """define a factorial function"""
    facto =1 # Set the variables =1
    while x >= 1: # run the loops when x is greater and equal to 1
        facto = facto * x # multiplies the current iteration by the previous one
        x = x - 1 # Remove one from the x to continues down the loops
    return facto #Once the loop reached to 1, the value of facto will be returned 

def main(argv):
    print(f'The square root of 10 is: {foo_1(10)} ')
    print(f'The bigger number between 7 and 12 is: {foo_2(7, 12)}')
    print(f'The modified sequence of 77, 100 and 3 with the largest number at the end is: {foo_3(77, 100, 3)}')
    print(f'The factorial of 5 is:{foo_4(5)}')
    print(f'The factorial of 6 is:{foo_5(6)}')
    print(f'The factorial of 7 is:{foo_6(7)}')
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 81.0

Output (only first 500 characters): 


**********************************************************************
The square root of 10 is: 3.1622776601683795 
The bigger number between 7 and 12 is: 12
The modified sequence of 77, 100 and 3 with the largest number at the end is: [77, 100, 100]
The factorial of 5 is:120
The factorial of 6 is:720
The factorial of 7 is:5040

**********************************************************************

Code ran without errors

Time consumed = 0.04898s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'boilerplate'
__author__ = 'ANQI WANG (aw222@ic.ac.uk)'
__version__ = '3.10.7'
__license__ = "None"

import sys

def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate')
    return 0

if __name__ == "__main__":
    """ Make sure the "main" function is called from command line """
    status = main(sys.argv)
    sys.exit(status)

if (__name__ == "__main__"):
    def main(argv):
    print('This is a boilerplate') # NOTE: indented using two tabs or four spaces
    sys.exit(status)
        
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 80.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/boilerplate.py", line 22
    print('This is a boilerplate') # NOTE: indented using two tabs or four spaces
    ^
IndentationError: expected an indented block after function definition on line 21

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
###########################
def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ') 
hello_1(12)

###########################
def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
        print ('hello')
        elif j % 4 == 3:
            print ('hello')
    print(' ')

hello_2(12)

###########################
def hello_3(x,y):
    for i in range(x,y):
        print('hello')
    print(' ')

hello_3(3,17)

##########################
def hello_4(x):
    while x != 15:
        print('hello')
        x = x +3
    print('')

hello_4(0)

#########################
def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print ('hello')
        x = x +1
    print('')

hello_5(12)

# WHILE loop with BREAK
def hello_6(x,y):
    while x: # while x is True
        print("hello!" + str(y))
        y += 1 # increment y by 1
        if y == 6:
            break
    print('')

hello_6 (True, 0)
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 75.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/cfexercises2.py", line 13
    print ('hello')
    ^
IndentationError: expected an indented block after 'if' statement on line 12

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'boilerplate'
__author__ = 'ANQI WANG (aw222@ic.ac.uk)'
__version__ = '3.10.7'
__license__ = "None"

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
My_List = [ i for i in rainfall if i[1]>100]


# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 
Month = [ i[0] for i in rainfall if i[1]<50]



# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 
MyList = []
Months = []

for x in rainfall:
    if x[1]>100:
        MyList.append(x)
    elif x[1]<50:
        Month.append(x[0])

print(MyList)

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 73.5

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]

**********************************************************************

Code ran without errors

Time consumed = 0.03697s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
def buggyfunc(x):
    y = x
    for i in range(x):
        y = y-1
        z = x/y
    return z

buggyfunc(20)


def buggyfunc(x):
    y = x
    for i in range(x):
        try:
            y = y-1
            z = x/y
        except:
            print(f"This didn't work;{x = };{y = }")
    return z

buggyfunc(20)


def buggyfunc(x):
    y = x
    for i in range(x):
        try: 
            y = y-1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work;{x = }; {y = }")
        else:
            print(f"OK; {x = }; {y = }, {z = };")
    return z

buggyfunc(20)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 70.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/debugme.py", line 8, in <module>
    buggyfunc(20)
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/debugme.py", line 5, in buggyfunc
    z = x/y
ZeroDivisionError: division by zero

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'test_control_flow'
__author__ = 'ANQI WANG (aw222@ic.ac.uk)'
__version__ = '3.10.7'
__license__ = "None"

#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Your Name (Your.Name@your.email.address)'
__version__ = '0.0.1'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
        
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """
    #Define function to be tested
    if x % 2 == 0:
        return f"{x} is Even!"
    return f"{x} is Odd!"

def main(argv): 
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()   # To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 69.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.07424s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'align_seqs'
__author__ = 'ANQI WANG (aw222@ic.ac.uk)'
__version__ = '3.10.7'
__license__ = "None"

# Imports
import pandas as pd
import sys
import io

### Write and Read .csv files to get the two example sequence ###
# Write two sequence into a .csv file and save in /data
data = {'seq1':['CAATTCGGAT'],'seq2':['ATCGCCGGATTACGGG']}
data_df = pd.DataFrame(data)
data_df.to_csv('../data/align_seq.csv')

# Read .csv file
filename = '../data/align_seq.csv'
df = pd.read_csv(filename)
print(df)

# read the two example sequence to match from the .csv file
def file_input():
    seq1 = df.iloc[0,1]
    seq2 = df.iloc[0,2]
    return seq1, seq2

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest
def swap_lengths(seq1, seq2):
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths

    return s1, s2, l1, l2

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
def best_match(s1, s2, l1, l2):
    my_best_align = None
    my_best_score = -1

    for i in range(l1): # Note that you just take the last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
        print(my_best_align)
        print(s1)
        print("Best score:", my_best_score)

    return my_best_align, my_best_score

### Output file ###
def file_output(my_best_align, my_best_score):
    OutputData = {'My best alignment is ':str(my_best_align),'My best score is ':str(my_best_score)}
    OutputData_df = pd.DataFrame(OutputData, index=[0])
    OutputData_df.to_csv('../results/output_align_seq.csv')

def main(argv): 
    """Main entry point of the program"""
    seq1, seq2 = file_input()
    s1, s2, l1, l2 = swap_lengths(seq1, seq2)
    my_best_align, my_best_score = best_match(s1, s2, l1, l2)
    file_output(my_best_align, my_best_score)
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 67.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/align_seqs.py", line 9, in <module>
    import pandas as pd
ModuleNotFoundError: No module named 'pandas'

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
import csv

# Read a file containing
# 'Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)'
with open ('../data/testcsv.csv','r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row [0])


# Write a file containing only species name and Body mass
with open('../data/testcsv.csv', 'r') as f:
    with open('../data/bodymass.csv', 'w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])
            
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 65.0

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.04587s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
####################################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 63.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/basic_io2.py", line 7, in <module>
    f = open('../sandbox/testout.txt','w')
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testout.txt'

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""blocks of code illustrating variable scope."""

_a_global = 10 # a global cariable

if _a_global >= 5:
    _b_global = _a_global + 5 # also a global variable

print("Before calling a_function, outside the function, the value of _a_global is", _a_global)
print("Before calling a_function, outside the function, the value of _b_global is", _b_global)

def a_function():
    _a_global = 4 # a local variable

    if _a_global >= 4:
        _b_global = _a_global +5 # also a local variable

    _a_local =3

    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value of _b_global is", _b_global)
    print("Inside the function, the value of _a_local is", _a_local) 

a_function()

print("After calling a_function, outside the function, the value of _a_global is (still)", _a_global)
print("After calling a_function, outside the function, the value of _b_global is (still)", _b_global)
print("After calling a_function, outside the function, the value of _a_local is ", _a_local)  

_a_global = 10

def a_function():
    _a_local = 4
    
    print("Inside the function, the value _a_local is", _a_local)
    print("Inside the function, the value of _a_global is", _a_global)
    
a_function()

print("Outside the function, the value of _a_global is", _a_global)

_a_global = 10

print("Before calling a_function, outside the function, the value of _a_global is", _a_global)

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    
    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value _a_local is", _a_local)
    
a_function()

print("After calling a_function, outside the function, the value of _a_global now is", _a_global)

def a_function():
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function2, value of _a_global is", _a_global)

    _a_function2()
    
    print("After calling a_function2, value of _a_global is", _a_global)
    
a_function()

print("The value of a_global in main workspace / namespace now is", _a_global)
**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 60.5

Output (only first 500 characters): 


**********************************************************************
Before calling a_function, outside the function, the value of _a_global is 10
Before calling a_function, outside the function, the value of _b_global is 15
Inside the function, the value of _a_global is 4
Inside the function, the value of _b_global is 9
Inside the function, the value of _a_local is 3
After calling a_function, outside the function, the value of _a_global is (still) 10
After calling a_function, outside the function, the value of _b_global is (still) 15

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/scope.py", line 28, in <module>
    print("After calling a_function, outside the function, the value of _a_local is ", _a_local)  
NameError: name '_a_local' is not defined. Did you mean: '_a_global'?

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#############################
# FILE INPUT
#############################
# Open a file for reading

f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

#Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

# Rewritten using 'with' statement
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines 
    for line in f:
        print(line)

# Once you drop out of the with, the file is automatically closed

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)

**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 58.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/AnqiWang_/week2/code/basic_io1.py", line 6, in <module>
    f = open('../sandbox/test.txt', 'r')
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#Loop exmples

# FOR loops
for i in range(5):
    print(i)

my_list = [0,2,"geronimo!",3.0,True,False]
for k in my_list:
    print(k)

total = 0
summands = [0,1,11,111,1111]
for s in summands:
    total  = total +s
    print (total)

# WHILE loops
z=0
while z<100:
    z=z+1
    print (z)

#Functions
def foo(x):
    x *= x # same as x = x*x
    print (x)
    return x

#distinction
def foo(x):
    x *= x # same as x = x*x
    print (x)
    return x
y = foo(2)
y
type(y)

**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 55.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
4

**********************************************************************

Code ran without errors

Time consumed = 0.03727s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'oaks_debugme'
__author__ = 'ANQI WANG (aw222@ic.ac.uk)'
__version__ = '3.10.7'
__license__ = "None"

import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus'
    >>> is_an_oak('Quercus robur')
    True
    >>> is_an_oak('Fraxinus excelsior')
    False
    >>> is_an_oak('Pinus sylvestris')
    False
    >>> is_an_oak('Quercus cerris')
    True
    >>> is_an_oak('Quercus petraea')
    True
    >>> is_an_oak('quercus petraea')
    True
    >>> is_an_oak('quercusss petraea')
    True
    >>> is_an_oak('QuercusPetraea')
    True
     """
    # use startswith() to catch bugs in spelling/spacing
    return name.lower().startswith('quercus')

def main(argv): 
    #import ipdb; ipdb.set_trace()
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

doctest.testmod()  # runs embedded doctests
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 54.5

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.07984s

======================================================================
======================================================================
Finished running scripts

Ran into 8 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 54.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!