Starting code feedback for Anqi, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 337.88 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, MiniProject, week6, week7, week4, week3, week2, Feedback, HPC, week1, week5

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*.tmp
*.log
.DS_Store
*/sandbox
.vscode
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Anqi's CMEE Coursework Repository
This README file contains details about the modules within Anqi Wang's (aw222@ic.ac.uk) CMEE Coursework. This coursework contributes towards the fulfilment of MSc Computational Methods in Ecology and Evolution (CMEE) at Imperial College London. <br />

Many of the task requirements and information can be found at [The Mulitilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/intro.html)

## Installation

To use scripts in this repository, clone and run.

```bash
git clone git@github.com:AnqiW222/CMEECourseWork.git
```

## Contents
### Week 1: UNIX, Shell scription, LaTeX and Version Control with Git
**Summary:** A brief introduction of the Multilingual Quantitative Biological Methods, UNIX basic knowledge, Introductory shell scripting exercises, Produce scientific documents with LaTeX, and Use version control (Git) to share the files with others<br />
**Language Use:** Bash, LaTex

---

### Week 2: Basic Python Programming
**Summary:** Introduction to writing Python scripts/programs<br />
**Language Use:** Python, Bash

---

### Week 3: R Programming and Data Management & Visualizatio 
**Summary:** Biological Computing in R, Data management and Visualization with R.<br />
**Language Use:** R, LaTeX, Bash

---

### Week 4: Statistics in R
**Summary:** Core Skills Module of PG Life Science, statistical methods that are of wide use in research projects, the different ways of analysing data and the importance of biological interpretation. <br />
**Language Use:** R

---

### Week 5: Spatial Analyses and GIS
**Summary:** Core Skills Module of PG Life Science, using and handling GIS data, along with core concepts in GIS and remote sensing. <br />
**Language Use:** R

---

### Week 6: Genomics and Bioinformatics
**Summary:** Core Skills Module of PG Life Science, introduce the types of questions that can be addressed with population genomic data, and the theory and computational methodologies that are available for answering these questions. <br />
**Language Use:** R

---

### Week 7: Advanced Python Programming
**Summary:** Advanced Python coding skills with introduction of IDE, profiling code, and using computing language flexible. <br />
**Language Use:** Python, R, Bash

---

### Week 8 + 9: MiniProject
**Summary:** MSc CMEE Miniproject: i) What mathematical models best fit to an empirical dataset; ii) Based upon bacteria growth, mechanistic vs. phenomenological models, which is the best fit. Using all biological computing tools learned so far, from data pre-processing, model fitting, plotting and analysis results, to coding and academic report writing, solve the ecological modelling question.<br />
**Language Use:** Python, R, LaTeX, Bash

---

### Week 10 + 11: High Performance Computing and Math Primer
**Summary:** Using Imperial College's HPC cluster as tools and techniques  to solve biological problems, and dealing with the huge data sets through parallel computing. Introduction to the preliminary requirements for the topics that will be covered during the Maths for Biologists module. <br />
**Language Use:** R, Bash, HPC

## Language Versions
**Python:** 3.9.12 <br />
**R:** 4.2.1 <br />
**bash:** 3.2 <br />
**LaTeX:** 3.141592653-2.6-1.40.24 (TeX Live 2022) <br />
**Jupyter:** Notebook 6.4.8 <br />

All code has been written on a MacOS version 12.6 and any dependencies are detailed below the script names within weekly README files


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: week1, week2, week3, week4, week5, week6, week7

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: code, results, data

Found the following files: README.md, .gitignore

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework - week 3:

This README file contains details about the scripts from in-classwork and practicals for the third week.

## Description
More information about the R scripts and programs for coursework in **Biological Computing in R** section of the Computing Chapter and **Data Management and Visualization** section of Basic Data Analysis and Statistics Chapter of [The Mulitilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/notebooks/07-R.html)

## Language

R, LaTex, Bash, Python

## Dependencies
For some scripts in this directory, packages [tidyverse](https://cran.r-project.org/web/packages/tidyverse/index.html), [ggplot2](https://cran.r-project.org/web/packages/ggplot2/index.html), [reshape2](https://cran.r-project.org/web/packages/reshape2/index.html), [maps](https://cran.r-project.org/web/packages/maps/index.html), [dplyr](https://cran.r-project.org/web/packages/dplyr/) and [sqldf](https://cran.r-project.org/web/packages/sqldf/index.html) are required. 
Please run the following script in **R/RStudio** for package installation: 
```R
install.packages(c("tidyverse", "ggplot2", "reshape2", "maps", "dplyr", "sqldf"))
```

[LaTeX](https://www.latex-project.org/) installation is also required. Please run following **bash** script in Terminal for installation:
```bash
brew install texlive-full texlive-fonts-recommended texlive-pictures texlive-latex-extra imagemagick
```

_The installation commands are used for MacOS, may varied with the different operating system._

## Individual Practicals 
### Biological Computing in R:

#### apply1.R:
<font size=2>**Summary:** Applying a function to the rows or columns of a matrix.<br />
**Input:** n/a <br />
**Output:** Results prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript apply1.R 
```
</font>

#### apply2.R:
<font size=2>**Summary:** Using apply to define own functions. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal <br />
**Running Instructions:** 
```bash
Rscript apply2.R 
```
</font>

#### basic_io.R:
<font size=2>**Summary:** A simple script to illustrate R input-output and the use of read() and write() functions. <br />
**Input:** n/a <br />
**Output:** Result saves to */results/MyData.csv*. <br />
**Running Instructions:** 
```bash
Rscript basic_io.R 
```
</font>

#### boilerplate.R:
<font size=2>**Summary:** boilerplate R script.<br />
**Input:** n/a <br />
**Output:** Results prints to terminal. <br />
**Running Instructions:** 
```bash
Rscript boilerplate.R
``` 
</font>

#### break.R:
<font size=2>**Summary:** R loop demonstration. <br />
**Input:** n/a <br />
**Output:** Results prints to terminal. <br />
**Running Instructions:** 
```bash
Rscript break.R
```
</font>

#### browse.R:
<font size=2>**Summary:** sing the browser() function to debug by examining local variables.<br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript browse.R 
```
</font>

#### control_flow.R:
<font size=2>**Summary:** Demonstrating control flow tools. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript control_flow.R 
```
</font>

#### Florida.R:
<font size=2>**Summary:** Calculates correlation coefficient between temperature and time for the 20th century in Key West, Florida and uses a permutation analysis to calculate the P-value.<br />
**Input:** */data/KeyWestAnnualMeanTemperature.RData* <br />
**Dependencies:** tidyverse <br />
**Output:** Result prints to terminal and saves figures in */results*.<br />
**Running Instructions:** 
```bash
Rscript Floria.R 
```
</font>

#### next.R:
<font size=2>**Summary:** using 'next' to skip to next iteration of for loop. Only prints odd numbers <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript next.R 
```
</font>

#### preallocation.R:
<font size=2>**Summary:** Compares times of pre-allocation to no pre-allocation. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript preallocation.R 
```
</font>

#### R_conditionals.R:
<font size=2>**Summary:** Functions with conditionals examples. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript R_conditionals.R 
```
</font>

#### Ricker.R:
<font size=2>**Summary:** Plots the ricker model. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript Ricker.R 
```
</font>

#### sample.R:
<font size=2>**Summary:** Explains sys.argv in a practical way. <br />
**Input:** n/a <br />
**Output:** n/a <br />
**Running Instructions:** 
```bash
Rscript sample.R 
```
</font>

#### TreeHeight.R:
<font size=2>**Summary:** alculating heights of trees given distance of each tree from its base and angle to its top, using  the trigonometric formula. <br />
**Input:** */data/trees.csv* <br />
**Output:** Result saves to */results/TreeHts.csv*.<br />
**Running Instructions:** 
```bash
Rscript TreeHeight.R 
```
</font>

#### try.R:
<font size=2>**Summary:** illustrates try. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript try.R 
```
</font>

#### Vectorize1.R:
<font size=2>**Summary:** Sums all elements of a matrix. Compares sum() and a sum function. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript Vectorize1.R 
```
</font>

#### Vectorize2.R:
<font size=2>**Summary:** Vectorizes the ricker model and adds fluctuation <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript Vectorize2.R 
```
</font>

#### *****LaTeX and its compile for Florida.R*****

#### Florida.tex:
<font size=2>**Summary:** LaTeX code writeup file for results and their interpretation from Florida.R <br /></font>

#### Compile_Florida.sh
<font size=2>**Summary:** Shell script to compile Florida.tex <br />
**Input:** n/a <br />
**Output:** Create a pdf document and saved in */code/Florida.pdf*.<br />
**Running Instructions:** 
```bash
bash Compile_Florida.sh
```
</font>

### Data Management and Visualization:

#### DataWrang.R:
<font size=2>**Summary:** Examples of loops and conditionals combined. <br />
**Input:** PoundHillData.csv, PoundHillMetaData.csv from /data. <br />
**Dependencies:** reshape2 <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript DataWrang.R 
```
</font>

#### DataWrangTidy.R:
<font size=2>**Summary:** Wrangling the pound hill dataset using tidyverse. <br />
**Input:** */data/PoundHillData.csv, PoundHillMetaData.csv* <br />
**Dependencies:** tidyverse <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** 
```bash
Rscript DataWrangTidy.R 
```
</font>

#### ggthemes.R:
<font size=2>**Summary:** Introduction of ggthemes which could provides some additional geoms, scales, and themes for ggplot. <br />
**Input:** n/a <br />
**Dependencies:** ggplot2 <br />
**Output:** Result saves to */results/MyBars.pdf* as a figure. <br />
**Running Instructions:** 
```bash
Rscript ggthemes.R 
```
</font>

#### Girko.R:
<font size=2>**Summary:** Plotting two dataframes together. <br />
**Input:** n/a <br />
**Dependencies:** ggplot2 <br />
**Output:** Result saves to */results/Girko.pdf* as a figure (the plot prints in the view window).<br />
**Running Instructions:** 
```bash
Rscript Girko.R 
```
</font>

#### GPDD_Data.R:
<font size=2>**Summary:** apping the Global Population Dynamics Database (GPDD) with [maps](https://cran.r-project.org/web/packages/maps/index.html). <br />
**Input:** */data/GPDDFiltered.RData* <br />
**Dependencies:** maps, ggplot2, mapdata
**Output:** Result saves to */results/worldmap.pdf*. <br />
**Running Instructions:** 
```bash
Rscript GPDD_Data.R 
```
</font>

#### MyBars.R:
<font size=2>**Summary:** Annotating a plot. <br />
**Input:** */data/Results.txt* <br />
**Dependencies:** ggplot2 <br />
**Output:** Result saves to */results/MyBars.pdf* as a figure (the plot prints in the view window).<br />
**Running Instructions:** 
```bash
Rscript MyBars.R 
```
</font>

#### PlotLin.R:
<font size=2>**Summary:** Annotates a linear regression plot <br />
**Input:** n/a <br />
**Dependencies:** ggplot2 <br />
**Output:** Result saves to */results/MyLinReg.pdf* as a figure (the plot prints in the view window). <br />
**Running Instructions:** 
```bash
Rscript PlotLin.R 
```
</font>

#### PP_Dists.R:
<font size=2>**Summary:** Creating three figures, each containing subplots of distributions of predator mass, prey mass, and the size ratio of prey mass over predator mass by feeding interaction type. And calculating the mean and median log predator mass, prey mass, and predator-prey size ratio, by feeding type. <br />
**Input:** */data/EcolArchives-E089-51-D1.csv* <br />
**Dependencies:** ggplot2 <br />
**Output:** Pdf figures *Pred_Subplots.pdf, Prey_Subplots.pdf, SizeRatio_Subplots.R* and regression results *PP_Results.csv* save to */results* <br />
**Running Instructions:** 
```bash
Rscript PP_Dists.R 
```
</font>

#### PP_Regress.R:
<font size=2>**Summary:** Plotting analysis subsetted by the Predator.lifestage, and calculate the regression results corresponding to the lines fitted. <br />
**Input:** */data/EcolArchives-E089-51-D1.csv* <br />
**Dependencies:** ggplot2 <br />
**Output:** Results save to */results/PP_Regress_Results.csv, PP_Regress.pdf*. <br />
**Running Instructions:** 
```bash
Rscript PP_Regress.R 
```
</font>

#### SQLinR.R:
<font size=2>**Summary:** Plot with sqlite package. <br />
**Input:** */data/Resource.csv* <br />
**Dependencies:** sqlite, ggplot2 <br />
**Output:** Result prints to terminal and a table name "Resource" is wrote .<br />
**Running Instructions:** 
```bash
Rscript SQLinR.R
```
</font>


## Groupwork Practicals -- 02_Booming_Bonobos
Cover 4 groupwork practicals:
1. [Tree heights](https://mhasoba.github.io/TheMulQuaBio/notebooks/07-R.html#groupwork-practical-on-tree-heights)
2. [Tree heights2](https://mhasoba.github.io/TheMulQuaBio/notebooks/07-R.html#groupwork-practical-on-tree-heights-2)
3. [Regression analysis](https://mhasoba.github.io/TheMulQuaBio/notebooks/08-Data_R.html#groupwork-practical-regression-analysis) 
4. [Autocorrelation in Florida weather](https://mhasoba.github.io/TheMulQuaBio/notebooks/07-R.html#groupwork-practical-autocorrelation-in-florida-weather)

#### get_TreeHeight.R:
<font size=2>**Summary:** This function calculates heights of trees given distance of each tree from its base and angle to its top, using  the trigonometric formula. <br />
**Input:**  */data/trees.csv* <br />
**Output:** Result saves to */results/trees_treeheights_R.csv*.<br />
**Running Instructions:** 
```bash
Rscript get_TreeHeight.R ../data/trees.csv
```
</font>

#### get_TreeHeight.py:
<font size=2>**Summary:** Python version of get_TreeHeight.R. <br />
**Input:**  */data/trees.csv* <br />
**Output:** Result saves to */results/trees_treeheights_py.csv*.<br />
**Running Instructions:** 
```bash
python3 get_TreeHeight.py ../data/trees.csv
```
</font>

#### run_get_TreeHeight.sh:
<font size=2>**Summary:** Shell script to run both get_TreeHeight.R and get_TreeHeight.py. <br />
**Input:**  n/a <br />
**Output:** Result saves to */results/trees_treeheights_R.csv, trees_treeheights_py.csv*.<br />
**Running Instructions:** 
```bash
bash run_get_TreeHeight.sh 
```
</font>

#### PP_Regress_loc.R:
<font size=2>**Summary:** Similar to PP_Regress.R, separated by the dataset’s Location. <br />
**Input:**  */data/EcolArchives-E089-51-D1.csv* <br />
**Dependencies:** ggplot2, plyr <br />
**Output:** Result saves to */results/PP_Regress_loc_Results.csv*. <br />
**Running Instructions:** 
```bash
Rscript PP_Regress_loc.R 
```
</font>

#### TAutoCorr.r
<font size=2>**Summary:** Calculates the autocorrelation of temperature between years. It then tests the significance of this using permutation testing. <br />
**Input:**  */data/KeyWestAnnualMeanTemperature.RData* <br />
**Output:** Result saves to */results/autocorr_histogram.pdf*. <br />
**Running Instructions:** 
```bash
Rscript TAutoCorr.r
```
</font>

#### *****LaTeX and its compile for Florida.R*****

#### AutoCorrFlorida.tex:
<font size=2>**Summary:** LaTeX code writeup file for results and their interpretation from TAutoCorr.r <br /></font>

#### AutoCorrFlorida.bib:
<font size=2>**Summary:** LaTeX Bibliography for AutoCorrFlorida.tex <br /></font>

#### CompileLaTeX.sh *(Optional, or simplily compile the LaTeX file via terminal)*
<font size=2>**Summary:** Required a shell script to compile AutoCorrFlorida.tex <br />
**Input:** n/a <br />
**Output:** Create a pdf document and saved in */code/AutoCorrFlorida.pdf*.<br />
**Running Instructions:** 
```bash
bash CompileLaTeX.sh
```
</font>


## Author & Contact

<font size=2>**Name:** ANQI WANG<br />
**Email:** aw222@ic.ac.uk</font>
**********************************************************************

Results directory is empty - good! 

Found 37 code files: apply2.R, apply1.R, Girko.R, next.R, plotLin.R, Florida.R, sample.R, PP_Dists.R, get_TreeHeight.py, preallocation.R, TAutoCorr.r, SQLinR.R, try.R, AutoCorrFlorida.tex, MyBars.R, PP_Regress_loc.R, control_flow.R, ggthemes.R, Ricker.R, AutoCorrFlorida.bib, boilerplate.R, R_conditionals.R, browse.R, GPDD_Data.R, PP_Regress.R, get_TreeHeight.R, Vectorize2.R, DataWrangTidy.R, break.R, run_get_TreeHeight.sh, DataWrang.R, Compile_Florida.sh, CompileLaTeX.sh, Florida.tex, TreeHeight.R, basic_io.R, Vectorize1.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file apply2.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: apply2.R
# Created: Oct 2020
# Description: In-class practical script 2

SomeOperation <- function(v) { # when the sum of v greater than 0, then return 
  # v*100, otherwise return itself
  if (sum(v) > 0) { #note that sum(v) is a single (scalar) value
    return (v * 100)
  } else { 
    return (v)
  }
}

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))
**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 


**********************************************************************
            [,1]        [,2]       [,3]       [,4]       [,5]      [,6]
 [1,]  -42.07447  0.09259781  -39.17954  -76.00406 -1.4050053  77.46245
 [2,]  119.84086  0.69876319  180.78064  158.95468 -0.3176932  70.06777
 [3,]   71.20527 -1.16710825   98.96590   44.99923 -1.0383630  78.06620
 [4,]  234.92560 -1.95153278  -37.48557   94.84163  0.7723782 182.47602
 [5,]   29.96916 -0.07657379  -30.16570 -143.22538  0.1794008 -56.21880
 [6,]  -21.33851 -0.36214281 -103.58190   81.46948 -2.7280593 -41.013
**********************************************************************

Code ran without errors

Time consumed = 0.20551s

======================================================================
Inspecting script file apply1.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: apply1.R
# Created: Oct 2020
# Description: In-class practical script 1

## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)

## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)
**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 


**********************************************************************
 [1] -0.24951647 -0.05399338  0.45740134 -0.08406239 -0.10342256 -0.40211636
 [7] -0.13252253 -0.09226146 -0.37627028 -0.40767256
 [1] 0.6602037 1.3762127 0.9520394 0.7579623 1.6978852 0.5752741 1.5716948
 [8] 1.9516292 1.1765845 0.6782364
 [1] -0.06253764  0.23096318 -0.08169108 -0.48317228  0.36502596 -0.36700190
 [7]  0.07288493 -0.46516530  0.30946584 -0.96320836

**********************************************************************

Code ran without errors

Time consumed = 0.18244s

======================================================================
Inspecting script file Girko.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: ggthemes.R
# Created: Oct 2020
# Description: In-class practical: Plotting two dataframes together 

# According to Girko’s circular law, the eigenvalues of a matrix M of size N×N
# are approximately contained in a circle in the complex plane with radius N. 
# Let’s draw the results of a simulation displaying this result.

# First, build a function object that will calculate the ellipse (the perdicted bounds of the eigenvalues):
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}

N <- 250 # Assign size of the matrix

M <- matrix(rnorm(N * N), N, N) # Build the matrix

eigvals <- eigen(M)$values # Find the eigenvalues

eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe

my_radius <- sqrt(N) # The radius of the circle is sqrt(N)

ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse

names(ellDF) <- c("Real", "Imaginary") # rename the columns

# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")

# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p

# Save the plot
ggsave("Girko.pdf", path = "../results")


**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(eigDF, aes(x = Real, y = Imaginary)) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file next.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: next.R
# Created: Oct 2020
# Description: The 'next' statement in R

# prints odd numbers up to 10
for (i in 1:10) {
  if((i %% 2) == 0) # check if number odd
    next
  print(i) # skip to next iteration
}
**********************************************************************

Testing next.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.25195s

======================================================================
Inspecting script file plotLin.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: plotLin.R
# Created: Oct 2020
# Description: In-class practical: Mathematical display

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# import required package
library(ggplot2)

# create some linear regression "data"
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                   parse = TRUE, size = 6, 
                   colour = "blue")

#p

# Save the plot as pdf file
ggsave("MyLinReg.pdf", path = "../results/")

**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Saving 7 x 7 in image

======================================================================
Inspecting script file Florida.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: Florida.R
# Created: Oct 2020
# Description: R script to answer "Is Florida getting warmer?"

#################################
## Is Florida getting warmer? ##
#################################
# Calculate the correlation coefficients between temperature and time
# Use a permutation analysis to generate a distribution of random correlation coefficients 
# Compare the observed coefficient with this random distribution

rm(list = ls()) # Clear the workplace
# calculate the correlation coefficients between temperature and time
load("../data/KeyWestAnnualMeanTemperature.RData") # load the datast
ls()

class(ats) #return the values of the class attribute 
head(ats) # display the first n rows present in the input data frame
plot(ats) # plot the graph of ats

# Compute the appropriate correlation coefficient between years and Temperature and store it
library(tidyverse) # launch tidyverse
corcoeff <- cor(ats$Year, ats$Temp)#, method = "kendall") # Calculate the correlation coefficient
plot(ats, main = "The correlation coefficent between temperature and yeat")

print("Correlation coefficient for Year and Temp is:")
print (corcoeff)

# Repeat this calculation a sufficient number of times, and recalculating the correlation coefficient (and storing it)
# Each time randomly reshuffling the temperatures 

# create an empty vector to hold the coefficients of sampled populations
allcoeffs = c()
for (i in 1:1000){ #shuffles and calculates 1000 times
  tempsample = sample(ats$Temp) # creates a shuffled sample of the temperatures
  newcoeff <- cor(ats$Year, tempsample)#, method = "kendall") # calculates correlation coefficient of years and shuffled temperatures
  allcoeffs = c(allcoeffs, newcoeff) # stores all coefficients in a vector
}

# Calculate what fraction of the random correlation coefficients were greater than the observed one
# This is the approximate, asymptotic p-value
AsyPValue <- allcoeffs[allcoeffs>corcoeff]
print("The Approximate, asymptomatic p-value is:")
print(AsyPValue/allcoeffs)

# create figures
pdf("../results/atsplot.pdf")
plot(ats, main = "Temperature records by Year in Key West, Florida, USA")
dev.off()

pdf("../results/allcoeffs.pdf")
plot(allcoeffs, main = "Year vs. Temperature in Key West, Florida, USA", ylab = "Correlation coefficient")
dev.off()


pdf("../results/AsymptoticPValue.pdf")
hist(allcoeffs, main = "Permutation Analysis", xlab = "Correlation Coefficient")
dev.off()
# All values between 0.5.. and  -0.5.. were taken due to the hypothesis is:
# is Florida getting warmer? Which means the specified thing to considered is 
# whether there is a positive correlation
# If hypotheses is changed to whether Florida temperature is changing, 
# the value greater than |0.5..| (absolute value of 0.5..)should all be considered
# If hypothesis was is Florida getting colder, 
# the allcoeff may valued the all numbers below the observed ones


**********************************************************************

Testing Florida.R...

Output (only first 500 characters): 


**********************************************************************
[1] "ats"
[1] "data.frame"
  Year     Temp
1 1901 23.75000
2 1902 24.66667
3 1903 24.71667
4 1904 24.51667
5 1905 24.88333
6 1906 24.63333
[1] "Correlation coefficient for Year and Temp is:"
[1] 0.5331784
[1] "The Approximate, asymptomatic p-value is:"
numeric(0)
pdf 
  2 
pdf 
  2 
pdf 
  2 

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.6     ✔ purrr   0.3.4
✔ tibble  3.1.1     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()

======================================================================
Inspecting script file sample.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: sample.R
# Created: Oct 2020
# Description: Comparing run-times of functions with/without vectorization 
# and preallocation, some using sapply and lapply

######### Functions ##########

## A function to take a sample of size n from a population "popn" and return its mean
myexperiment <- function(popn,n) {
  pop_sample <- sample(popn, n, replace = FALSE)
  return(mean(pop_sample))
}

## Calculate means using a FOR loop on a vector without preallocation:
loopy_sample1 <- function(popn, n, num) {
  result1 <- vector() #Initialize empty vector of size 1 
  for(i in 1:num) {
    result1 <- c(result1, myexperiment(popn, n))
  }
  return(result1)
}

## To run "num" iterations of the experiment using a FOR loop on a vector with preallocation:
loopy_sample2 <- function(popn, n, num) {
  result2 <- vector(, num) # Preallocate expected size
  for(i in 1:num) {
    result2[i] <- myexperiment(popn, n)
  }
  return(result2)
}

## To run "num" iterations of the experiment using a FOR loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num) {
  result3 <- vector("list", num) #Preallocate expected size
  for(i in 1:num) {
    result3[[i]] <- myexperiment(popn, n)
  }
  return(result3)
}


## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num) {
  result4 <- lapply(1:num, function(i) myexperiment(popn, n))
  return(result4)
}

## To run "num" iterations of the experiment using vectorization with sapply:
sapply_sample <- function(popn, n, num) {
  result5 <- sapply(1:num, function(i) myexperiment(popn, n))
  return(result5)
}

set.seed(12345)
popn <- rnorm(10000) # Generate the population
hist(popn)

n <- 100 # sample size for each experiment
num <- 10000 # Number of times to rerun the experiment

print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))

print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))

print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))

print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))

print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))


# tapply function
x <- 1:20 # a vector
print(x)
# a factor type variable
y <- factor(rep(letters[1:5], each = 4)) 
print(y)
# add up the values in x
tapply(x, y, sum)


# the by function
attach(iris)
#print(iris)

# colMeans function
by(iris[,1:2], iris$Species, colMeans)
by(iris[,1:2], iris$Petal.Width, colMeans)


# replicate
replicate(10, runif(5))

**********************************************************************

Testing sample.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops without preallocation on a vector took:"
   user  system elapsed 
  0.362   0.022   0.384 
[1] "Using loops with preallocation on a vector took:"
   user  system elapsed 
  0.287   0.000   0.287 
[1] "Using loops with preallocation on a list took:"
   user  system elapsed 
  0.265   0.000   0.264 
[1] "Using the vectorized sapply function (on a list) took:"
   user  system elapsed 
  0.240   0.000   0.241 
[1] "Using the vectorized lapply function (on a list) took:"
   user  syst
**********************************************************************

Code ran without errors

Time consumed = 1.77945s

======================================================================
Inspecting script file PP_Dists.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: PP_Dists.R
# Created: Oct 2020
# Description: Body mass distributions

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

require(tidyverse)

# launch R and read in these data to a data frame (note the relative path):
MyDF = read.csv("../data/EcolArchives-E089-51-D1.csv")
# use dplyr package to columns run down the page, and data runs across, ≈ str()
dplyr::glimpse(MyDF)

# change the type of certain columns to factor because we will want to use them as grouping variables:
MyDF$Type.of.feeding.interaction = as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location = as.factor(MyDF$Location)

# convert masses from mg to g
for (i in 1:nrow(MyDF)){
  if (MyDF$Prey.mass.unit[i] == "mg"){
    MyDF$Prey.mass.unit[i] = "g"
    MyDF$Prey.mass[i] = MyDF$Prey.mass[i] / 1000
 }
}

# Calculating size ratio
Size.ratio = log(MyDF$Prey.mass/MyDF$Predator.mass)
MyDF$Size.ratio <- Size.ratio # Create a new column for later results
MyDF$Size.ratio = as.numeric(MyDF$Size.ratio) # Creates or coerces objects of type "numeric". 

# calculating body size stats by feeding type
MyDFinsectivorous <- subset(MyDF, MyDF$Type.of.feeding.interaction == "insectivorous")
MyDFpiscivorous <- subset(MyDF, MyDF$Type.of.feeding.interaction == "piscivorous")
MyDFplanktivorous <- subset(MyDF, MyDF$Type.of.feeding.interaction == "planktivorous")
MyDFpredacious <- subset(MyDF, MyDF$Type.of.feeding.interaction == "predacious")
MyDFpredaciouspiscivorous <- subset(MyDF, MyDF$Type.of.feeding.interaction == "predacious/piscivorous")

# creating predator mass histograms
pdf("../results/Pred_Subplots.pdf", 11.7, 8.3)

par(mfcol=c(5,1)) # initialise multi-paneled plot

par(mfg=c(1,1)) # first sub-plot
hist(log10(MyDFinsectivorous$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - insectivorous")
par(mfg=c(2,1)) # second sub-plot + 
hist(log10(MyDFpiscivorous$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - piscivorous")
par(mfg=c(3,1)) # second sub-plot
hist(log10(MyDFplanktivorous$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - planktivorous")
par(mfg=c(4,1)) # second sub-plot
hist(log10(MyDFpredacious$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - predacious")
par(mfg=c(5,1)) # second sub-plot
hist(log10(MyDFpredaciouspiscivorous$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - predacious/piscivorous")

dev.off()

# creating prey mass histograms
pdf("../results/Prey_Subplots.pdf", 11.7, 8.3)

par(mfcol=c(5,1)) # initialise multi-paneled plot

par(mfg=c(1,1)) # first sub-plot
hist(log10(MyDFinsectivorous$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - insectivorous")
par(mfg=c(2,1)) # second sub-plot
hist(log10(MyDFpiscivorous$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - piscivorous")
par(mfg=c(3,1)) # second sub-plot
hist(log10(MyDFplanktivorous$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - planktivorous")
par(mfg=c(4,1)) # second sub-plot
hist(log10(MyDFpredacious$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - predacious")
par(mfg=c(5,1)) # second sub-plot
hist(log10(MyDFpredaciouspiscivorous$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - predacious/piscivorous")

dev.off()

# creating size ratio histograms
pdf("../results/SizeRatio_Subplots.pdf", 11.7, 8.3)
par(mfcol=c(5,1)) # initialise multi-paneled plot

par(mfg=c(1,1)) # first sub-plot
plot(density(MyDFinsectivorous$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - insectivorous")
par(mfg=c(2,1)) # second sub-plot
plot(density(MyDFpiscivorous$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - piscivorous")
par(mfg=c(3,1)) # second sub-plot
plot(density(MyDFplanktivorous$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - planktivorous")
par(mfg=c(4,1)) # second sub-plot
plot(density(MyDFpredacious$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - predacious")
par(mfg=c(5,1)) # second sub-plot
plot(density(MyDFpredaciouspiscivorous$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - predacious/piscivorous")

dev.off()

# create the pp_results.csv
stats <- MyDF %>%
  group_by(Type.of.feeding.interaction) %>%
  summarise(mean(log(Predator.mass)),
            median(log(Predator.mass)),
            mean(log(Prey.mass)),
            median(log(Prey.mass)),
            mean(log(Prey.mass / Predator.mass)),
            median(log(Prey.mass / Predator.mass)))
# name the columns
names(stats) <- c("Type.of.feeding.interaction",
                  "Mean.log.predator.mass",
                  "Median.log.predator.mass",
                  "Mean.log.prey.mass",
                  "Median.log.prey.mass",
                  "Mean.log.ratio.prey.predator.mass",
                  "Median.log.ratio.prey.predator.mass")
# write to csv
write.csv(stats, "../Results/PP_Results.csv", row.names = F)

**********************************************************************

Testing PP_Dists.R...

Output (only first 500 characters): 


**********************************************************************
Rows: 34,931
Columns: 15
$ Record.number               <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…
$ In.refID                    <chr> "ATSH063", "ATSH080", "ATSH089", "ATSH143"…
$ IndividualID                <chr> "1", "2", "3", "4", "5", "6", "7", "8", "9…
$ Predator                    <chr> "Rhizoprionodon terraenovae", "Rhizopriono…
$ Predator.common.name        <chr> "Atlantic sharpnose shark", "Atlantic shar…
$ Predator.taxon              <chr> "ectotherm vertebrate", "ectotherm verte
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: tidyverse
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.6     ✔ purrr   0.3.4
✔ tibble  3.1.1     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
Calls: write.csv -> eval.parent -> eval -> eval -> <Anonymous> -> file
In addition: Warning message:
In file(file, ifelse(append, "a", "w")) :
  cannot open file '../Results/PP_Results.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file get_TreeHeight.py...

File contents are:

**********************************************************************
#!/usr/bin/env pythons

""" Calculates tree heights given distance of each tree 
from its base and angle to its top, using  the trigonometric formula. 
Outputs to csv called INPUT_FILE_NAME_treeheights_py.csv"""


__appname__ = 'get_TreeHeight.py'
__author__ = 'Elliott Parnell (elliott.parnell22@imperial.ac.uk), Jooyoung Ser (jooyoung.ser19@imperial.ac.uk), Anqi Wang (anqi.wang22@imperial.ac.uk), Linke Feng (L.feng22@imperial.ac.uk)'
__version__ = '0.0.1'

## Imports ##
import numpy as np
import os
import csv
import sys

## Functions ##
def TreeHeight(degrees, distance):
    """Calculate tree heights"""
    radians = degrees * np.pi / 180
    height = distance * np.tan(radians)
    return height  

# Data loaded from command line 
if len(sys.argv) != 2:  # wrong input, exit directly
    print("One(just one) .csv file needed.")
    sys.exit("Please give right input. Try again.") 
    
else:
    with open(sys.argv[1], 'r') as a: 
        data = []    # setup an empty list for data storation
        
        for j in csv.reader(a): 
            data.append(j) 
        data.remove(data[0]) # remove header
            
        for i in data:
            i[1] = float(i[1])
            i[2] = float(i[2])
            i.append(TreeHeight(i[2], i[1])) # save height output to 3rd col
       
       #Write csv results
        with open("../results/"+ os.path.basename(os.path.splitext(sys.argv[1])[0]) + "_treeheights_py.csv", 'w') as b:   
            csv.writer(b).writerow(['Species', 'Distance.m', 'Angle.degrees', 'Tree.Height.m']) # header  ordered
            for t in data:
                csv.writer(b).writerow(t) 

              

**********************************************************************

Testing get_TreeHeight.py...

get_TreeHeight.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
One(just one) .csv file needed.

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Please give right input. Try again.

======================================================================
Inspecting script file preallocation.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: preallocation.R
# Created: Oct 2020
# Description: Preallocation in R

# for loop that resizes a vector repeatedly

NoPreallocFun <- function(x) {
  a <- vector() # empty vector
  for (i in 1:x) {
    a <- c(a, i) # concatenate
    print(a)
    print(object.size(a))
  }
}

system.time(NoPreallocFun(10))

# if you “pre-allocate” a vector that fits all the values, R doesn’t have to 
# re-allocate memory each iteration

PreallocFun <- function(x) {
  a <- rep(NA, x) # pre-allocated vector
  for (i in 1:x) {
    a[i] <- i # assign
    print(a)
    print(object.size(a))
  }
}

system.time(PreallocFun(10))

**********************************************************************

Testing preallocation.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
56 bytes
[1] 1 2
56 bytes
[1] 1 2 3
64 bytes
[1] 1 2 3 4
64 bytes
[1] 1 2 3 4 5
80 bytes
[1] 1 2 3 4 5 6
80 bytes
[1] 1 2 3 4 5 6 7
80 bytes
[1] 1 2 3 4 5 6 7 8
80 bytes
[1] 1 2 3 4 5 6 7 8 9
96 bytes
 [1]  1  2  3  4  5  6  7  8  9 10
96 bytes
   user  system elapsed 
  0.015   0.003   0.018 
 [1]  1 NA NA NA NA NA NA NA NA NA
96 bytes
 [1]  1  2 NA NA NA NA NA NA NA NA
96 bytes
 [1]  1  2  3 NA NA NA NA NA NA NA
96 bytes
 [1]  1  2  3  4 NA NA NA NA NA NA
96 bytes
 [1]  1  2  3  4  5 NA N
**********************************************************************

Code ran without errors

Time consumed = 0.25380s

======================================================================
Inspecting script file TAutoCorr.r...

File contents are:

**********************************************************************
#!/usr/bin/env R

# Title: TAutoCorr.R
# Author: Jooyoung Ser (jooyoung.ser19@imperial.ac.uk), Elliott Parnell (elliott.parnell22@imperial.ac.uk), Anqi Wang (anqi.wang22@imperial.ac.uk), Linke Feng (l.feng22@imperial.ac.uk)
# Date: Nov 2022

# Script that calculates the autocorrelation of temperature between years. It then tests the significance of this using permutation testing.

#Clear environment
rm(list=ls())

# Setseed 
set.seed(1234)

#Load data
load("../data/KeyWestAnnualMeanTemperature.RData")

# New columns with neigbouring temperatures
previous.year <- ats$Temp[1:99]
next.year <- ats$Temp[2:100]

# Calculate correlation
observed.cor <- cor(previous.year, next.year)

# New column for shuffled temperatures
ats$shuffled <- NA
results <- data.frame()

#function to shuffle temperatures & years to randomly assign them to each other + conducting correlation analysis
permuation <- function(before, after, n) {
  for (i in 1:n){
    shuffled <-sample(before)
    output <- c(i, cor(shuffled, after))
    results <- rbind(results, output)
  }
  return(results)
}

# finding correlation coefficient of permutations
df <- permuation(previous.year, next.year, 10000)
colnames(df) <- c("Permutation", "Correlation")

#number of permutations with correlation coefficient above observed correlation
above <- subset(df, df$Correlation > observed.cor)

#loading package
library(ggplot2)
theme_set(theme_minimal())

#plotting histogram
plot <-ggplot(df, aes(x = Correlation)) +
  geom_histogram(fill = "#69b3a2",
                 color = "#e9ecef",
                 alpha = 0.9) +
  ggtitle("Observed Correlation Compared With Random Permutations") +
  xlab("Correlation Coefficient") +
  ylab("Frequency") +
  geom_vline(aes(xintercept = observed.cor , colour = "red"),
             linetype = "longdash",
             show.legend = FALSE) +
  annotate("text",
           x=0.35, 
           y=120, 
           label="Observed Correlation", 
           color = "red",
           angle = 90,
           size = 3)

print(plot)
#saving output file
pdf(file="../results/autocorr_histogram.pdf")
print(plot)
dev.off()

**********************************************************************

Testing TAutoCorr.r...

Output (only first 500 characters): 


**********************************************************************
pdf 
  2 

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

======================================================================
Inspecting script file SQLinR.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: SQLinR.R
# Created: Oct 2020
# Description: Build, manipulate, and access databases easily with SQlinR

#install the sqlite package
#install.packages('sqldf')

# To load the packages
library(sqldf)

# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')

# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")

# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data

 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")


# Once we have our table, we can query the results using:

dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")


# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.

Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R

# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)

# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table

# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames



**********************************************************************

Testing SQLinR.R...

Output (only first 500 characters): 


**********************************************************************
<SQLiteResult>
  SQL  CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)
  ROWS Fetched: 0 [complete]
       Changed: 0
<SQLiteResult>
  SQL  INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')
  ROWS Fetched: 0 [complete]
       Changed: 1
<SQLiteResult>
  SQL  INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')
  ROWS Fetched: 0 [complete]
       C
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: gsubfn
Loading required package: proto
Loading required package: RSQLite
Warning message:
Closing open result set, pending rows 
Warning message:
Closing open result set, pending rows 
Warning message:
Closing open result set, pending rows 
Warning message:
Closing open result set, pending rows 
Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../Data/Resource.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file try.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: try.R
# Created: Oct 2020
# Description: The 'try' function for catching errors

# Calculates a sample mean unless the sample size is too small
# print the error message but the script will keep running.
doit <- function(x) {
  temp_x <- sample(x, replace = TRUE)
  if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
    print(paste("Mean of this sample was:", as.character(mean(temp_x))))
  } 
  else {
    stop("Couldn't calculate mean: too few unique values!")
  }
}

set.seed(1345)
popn <- rnorm(50)
# hist(popn)

# run doit using lapply - repeat sampling 15 times
# lapply(1:15, function(i) doit(popn))  # WILL generate an error at some point when sample too small

## using TRY:
result <- lapply(1:15, function(i) try(doit(popn), FALSE))  
# FALSE means error messages NOT supressed - if TRUE won't see error messages at all
# error messages still generated, but script continues to run

# errors are stored in result
class(result)
print(result)  # tells which runs produced error and why


## can also store the results "manually" using loop:
# result <- vector("list", 15)  # pre-allocate
# for (i in 1:15) {
#     result[[i]] <- try(doit(popn), FALSE)
# }
# result
**********************************************************************

Testing try.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Mean of this sample was: -0.11620822588674"
[1] "Mean of this sample was: -0.0468516755995931"
[1] "Mean of this sample was: -0.0890228211466614"
[1] "Mean of this sample was: -0.124229742255296"
[1] "Mean of this sample was: 0.0314144452816157"
[1] "Mean of this sample was: -0.233476945796405"
[1] "Mean of this sample was: -0.196681538928001"
[1] "Mean of this sample was: 0.0146969612111605"
[1] "Mean of this sample was: -0.234913159471725"
[1] "Mean of this sample was: -0.0497464588165691"
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in doit(popn) : Couldn't calculate mean: too few unique values!
Error in doit(popn) : Couldn't calculate mean: too few unique values!

======================================================================
Inspecting script file AutoCorrFlorida.tex...

File contents are:

**********************************************************************
\documentclass{article}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{subcaption}
\usepackage[a4paper, total={7in, 12in}]{geometry}
\usepackage[utf8]{inputenc}
\usepackage{natbib}
\bibliographystyle{unsrtnat}


\title{\textbf{Auto-correlation between annual temperatures in Florida\vspace{-0.5em}}}
\author{Elliott Parnell (EJP122@ic.ac.uk), Jooyoung Ser (jooyoung.ser19@imperial.ac.uk), \\ Anqi Wang (anqi.wang22@imperial.ac.uk) , Linke Feng (l.feng22@imperial.ac.uk) }


\begin{document}
\maketitle
    \section{Introduction \vspace{-0.5em}}
    Florida is located in Southeastern USA and is of particular importance as a biological hot-spot (\cite{noss2015global}). Florida is home to a large number of unique habitat types, including the Everglades, North Americas only subtropical preserve (\cite{brown2006species}). This leads to Florida having a high proportion of endemic species (\cite{jenkins2015us}). Understanding the local climate warming in Florida is crucial for predicting how species may fare with future climate warming. 
\vspace{-0.9em}
    \section{Methods \vspace{-0.5em}}

    A long term data set of annual mean temperatures from Key West, Florida, was used to calculate the correlation between the temperature of one year and the next. The correlation coefficient was calculated using the Pearson method. The significance of this corelation coefficient was then tested using permutation testing. The data points were randomly shuffled before calculating a new correlation coefficient for the null hypothesis. This was repeated 10,000 times to create a null distribution. The P value was then calculated from the percentage of coefficients in the null distibution greater than the coefficient of the original data. 
\vspace{-0.9em}
    \section{Results \vspace{-0.5em}}
    
        A significant correlation was found between the temperature of one year and the temperature of the next (correlation coefficient = 0.326, permutation test $P < 0.05$) (Figure 2). \vspace{-0.5em}
\vspace{-0.9em}
    \begin{figure}[h]
        \begin{minipage}{.5\textwidth}
            \centering
            \includegraphics[scale=0.4]{results/florida_plot}
            \caption{Mean annual temperature in Key \newline West, Florida, from 1901 to 2000 \newline \newline \vspace{-0.5em}}
            \label{fig:test1}
          \end{minipage}%
          \begin{minipage}{.5\textwidth}
            \centering
            \includegraphics[scale=0.4]{results/autocorr_histogram.pdf}
            \caption{Null distribution of correlation coefficients \newline between temperature of successive years in Key West, Florida. Red dashed line represents the test threshold correlation coefficient. \vspace{-0.5em}}
            \label{fig:test2} 
        \end{minipage}
    \end{figure}
    \vspace{-0.9em}
    \section{Discussion \vspace{-0.5em}}
    Auto-correlation between years indicates that climate change is happening non-randomly, with the previous years mean temperature affecting the next years. Understanding this allows us to predict future climate warming with better accuracy. 
    \vspace{-0.9em}
    \bibliography{AutoCorrFlorida \vspace{-0.5em}}

\end{document}
**********************************************************************

Testing AutoCorrFlorida.tex...

======================================================================
Inspecting script file MyBars.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: MyBars.R
# Created: Oct 2020
# Description: In-class practical: Annotating Plots

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# Import required package
require(ggplot2) # or library(ggplot2)
# use the ggplot geom text to annotate a plot:
a <- read.table("../data/Results.txt", header = TRUE)
# check the data
head(a)

a$ymin <- rep(0, dim(a)[1]) # append a column of zeros

# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, 
                        aes(x = x,
                            ymin = ymin,
                            ymax = y1,
                            size = (0.5)),
                        colour = "#E69F00",
                        alpha = 1/2, 
                        show.legend = FALSE)

# Print the second linerange
p <- p + geom_linerange(data = a, 
                        aes(x = x,
                            ymin = ymin,
                            ymax = y2,
                            size = (0.5)),
                        colour = "#56B4E9",
                        alpha = 1/2, 
                        show.legend = FALSE)

# Print the third linerange:
p <- p + geom_linerange(data = a, 
                        aes(x = x,
                            ymin = ymin,
                            ymax = y3,
                            size = (0.5)),
                        colour = "#D55E00",
                        alpha = 1/2, 
                        show.legend = FALSE)

# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))

# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
                            breaks = seq(3, 5, by = 0.05)) + 
  scale_y_continuous("My y axis") + 
  theme_bw() + 
  theme(legend.position = "none") 
#p

# Print the plot
print(p)
# Save the plot as pdf file
ggsave("MyBars.pdf", path = "../results/")
#dev.off()

**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 


**********************************************************************
         x   y1   y2 y3 Label
1 3.515424 4320 4320  0  <NA>
2 3.533984 2160 2160  0  <NA>
3 3.557647 4320 4320  0  <NA>
4 3.569953 4320 4320  0  <NA>
5 3.578984 8640 8640  0  <NA>
6 3.585665 2160 2160  0  <NA>

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: ggplot2
Warning message:
Removed 91 rows containing missing values (geom_text). 
Saving 7 x 7 in image
Warning message:
Removed 91 rows containing missing values (geom_text). 

======================================================================
Inspecting script file PP_Regress_loc.R...

File contents are:

**********************************************************************
#!/usr/bin/env R

# Title: PP_Regress_loc.R
# Author: Jooyoung Ser (jooyoung.ser19@imperial.ac.uk), Elliott Parnell (elliott.parnell22@imperial.ac.uk), Anqi Wang (anqi.wang22@imperial.ac.uk), Linke Feng (l.feng22@imperial.ac.uk)
# Date: Nov 2022

# Script similar to PP_Regress.R, with no generated plots but csv file from info about type of feeding interaction, Life stage and location


rm(list=ls())

#required R packages
require(ggplot2)
require(plyr)

# Import data
MyData <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Data frame: type, predator, slope, intercept, R2, fvalve, and pvalue in turn
PP_Regress_Results = data.frame() # empty dataframe for storation
for(i in unique(MyData$Predator.lifestage)){
  stage = subset(MyData, Predator.lifestage == i) # subset of each pred lifestage
  
  for(n in unique(stage$Type.of.feeding.interaction)){
    type = subset(stage, Type.of.feeding.interaction == n) # subset of feeding type
    
    for(j in unique(type$Location)){
    loc = subset(type, Location == j) # subset of location
    print(paste(loc$Predator.lifestage[1], loc$Type.of.feeding.interaction[1], loc$Location[1]))
    stats = summary(lm(log(Predator.mass)~log(Prey.mass), data = loc))
    if(is.null(stats$fstatistic[1])){ f = "NA"}
    else{f = as.numeric(stats$fstatistic[1])}
    temp = data.frame(n, i, j, stats$coefficients[2], stats$coefficients[1], stats$r.squared, f, stats$coefficients[8])
    PP_Regress_Results = rbind(PP_Regress_Results, temp) 
    }
  }
  
}

names(PP_Regress_Results) = c("Type.of.feeding.interaction"," Predator.lifestage","Location", "Regression.slope", "Regression.intercept", "R2", "F.value","p.value")  #header
write.csv(PP_Regress_Results, "../results/PP_Regress_loc_Results.csv") # csv result

**********************************************************************

Testing PP_Regress_loc.R...

Output (only first 500 characters): 


**********************************************************************
[1] "adult predacious/piscivorous Apalachicola Bay, Florida"
[1] "adult predacious/piscivorous Crooked Island Sound, Florida"
[1] "adult piscivorous Apalachicola Bay, Florida"
[1] "adult piscivorous Jeffreys Ledge, Gulf of Maine, New England"
[1] "adult piscivorous Stellwagen Bank, Gulf of Maine, New England"
[1] "adult piscivorous Cape Cod Bay, Gulf of Maine, New England"
[1] "adult piscivorous Great Channel South, Gulf of Maine, New England"
[1] "adult piscivorous South of Marthas Vineyard, New
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: ggplot2
Loading required package: plyr
Warning messages:
1: In summary.lm(lm(log(Predator.mass) ~ log(Prey.mass), data = loc)) :
  essentially perfect fit: summary may be unreliable
2: In summary.lm(lm(log(Predator.mass) ~ log(Prey.mass), data = loc)) :
  essentially perfect fit: summary may be unreliable

======================================================================
Inspecting script file control_flow.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: control_flow.R
# Created: Oct 2020
# Description: Using statement to give a finer control over the program’s “control flow”.

#########################################

## if statements
a <- TRUE
if (a == TRUE) {
  print ("a is TRUE")
} else {
  print ("a is FALSE")
}

## on a single line - BUT readability more important
z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}

#########################################

## for loops
for (i in 1:10) {
  j <- i * i
  print(paste(i, " squared is", j ))
}

#1:10

## loop over vector of strings
for(species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii')) {
  print(paste('The species is', species))
}

## loop using pre-existing vector
v1 <- c("a","bc","def")
for (i in v1) {
  print(i)
}

#########################################

## while loops
i <- 0
while (i < 10) {
  i <- i+1
  print(i^2)
}


**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 


**********************************************************************
[1] "a is TRUE"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
[1] "The species is Heliodoxa rubinoides"
[1] "The species is Boissonneaua jardini"
[1] "The species is Sula nebouxii"
[1] "a"
[1] "bc"
[1] "def"
[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100

**********************************************************************

Code ran without errors

Time consumed = 0.20649s

======================================================================
Inspecting script file ggthemes.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: ggthemes.R
# Created: Oct 2020
# Description: In-class practical: Introduction to ggthemes.

## ggthemes ##

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# install the package
#install.packages("ggthemes")
# load the data
MyDF = read.csv("../data/EcolArchives-E089-51-D1.csv")

# the try:
library(ggthemes)

p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass),
                      colour = Type.of.feeding.interaction )) +
  geom_point(size=I(2), shape=I(10)) + theme_bw()

p + geom_rangeframe() + # now fine tune the geom to Tufte's range frame
  theme_tufte() # and theme to Tufte's minimal ink theme    

**********************************************************************

Testing ggthemes.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass),  : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file Ricker.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: Ricker.R
# Created: Oct 2020
# Description: Running the Ricker model

Ricker <- function(N0=1, r=1, K=10, generations=50)
{
  # Runs a simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}

plot(Ricker(generations=10), type="l")
**********************************************************************

Testing Ricker.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.23090s

======================================================================
Inspecting script file AutoCorrFlorida.bib...

File contents are:

**********************************************************************
@article{jenkins2015us,
  title={US protected lands mismatch biodiversity priorities},
  author={Jenkins, Clinton N and Van Houtan, Kyle S and Pimm, Stuart L and Sexton, Joseph O},
  journal={Proceedings of the National Academy of Sciences},
  volume={112},
  number={16},
  pages={5081--5086},
  year={2015},
  publisher={National Acad Sciences}
}

@article{brown2006species,
  title={Species diversity in the Florida Everglades, USA: A systems approach to calculating biodiversity},
  author={Brown, Mark T and Cohen, Matthew J and Bardi, Eliana and Ingwersen, Wesley W},
  journal={Aquatic Sciences},
  volume={68},
  number={3},
  pages={254--277},
  year={2006},
  publisher={Springer}
}

@article{noss2015global,
  title={How global biodiversity hotspots may go unrecognized: lessons from the North American Coastal Plain},
  author={Noss, Reed F and Platt, William J and Sorrie, Bruce A and Weakley, Alan S and Means, D Bruce and Costanza, Jennifer and Peet, Robert K},
  journal={Diversity and Distributions},
  volume={21},
  number={2},
  pages={236--244},
  year={2015},
  publisher={Wiley Online Library}
}

**********************************************************************

Testing AutoCorrFlorida.bib...

======================================================================
Inspecting script file boilerplate.R...

File contents are:

**********************************************************************
# A boilplate R script

MyFunction <- function(Arg1, Arg2) {
  
  # Statements involving Arg1, Arg2:
  print(paste("Arguement", as.character(Arg1), "is a", class(Arg1))) # set the Arg1 and print Arg1's type
  print(paste("Arguement", as.character(Arg2), "is a", class(Arg2)))
  
  return(c(Arg1, Arg2))
}

MyFunction(1,2) # Test the function
MyFunction("Riki","Tiki") # Double check
**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Arguement 1 is a numeric"
[1] "Arguement 2 is a numeric"
[1] 1 2
[1] "Arguement Riki is a character"
[1] "Arguement Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.21708s

======================================================================
Inspecting script file R_conditionals.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: R_conditionals.R
# Created: Oct 2020
# Description: Functions with conditionals

# Check if an integer is even
is.even <- function(n = 2){
  if (n %% 2 == 0) {
    return(paste(n, "is even!"))
  } else {
  return(paste(n, "is odd!"))
  }
}

print(is.even(6))

# Checks if a number is a power of 2
is.power2 <- function(n = 2) {
  if (log2(n) %% 1==0) {
    return(paste(n, 'is a power of 2!'))
  } else {
    return(paste(n,'is not a power of 2!'))
  }
}

print(is.power2(4))

# Checks if a number is prime
is.prime <- function(n) {
  if (n==0) {
    return(paste(n,'is a zero!'))
  } else if (n==1) {
    return(paste(n,'is just a unit!'))
  }
  
  ints <- 2:(n-1)
  
  if (all(n%%ints!=0)) {
    return(paste(n,'is a prime!'))
  } else {
    return(paste(n,'is a composite!'))
  }
}

print(is.prime(3))

**********************************************************************

Testing R_conditionals.R...

Output (only first 500 characters): 


**********************************************************************
[1] "6 is even!"
[1] "4 is a power of 2!"
[1] "3 is a prime!"

**********************************************************************

Code ran without errors

Time consumed = 0.24633s

======================================================================
Inspecting script file browse.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: browse.R
# Created: Oct 2020
# Description: In-class practical running a simulation of expotential growth.

Exponential <- function(N0 = 1, r = 1, generations = 10) {
  # Runs a simulation of exponential growth
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations) {
    N[t] <- N[t-1] * exp(r)
    browser()
  }
  return (N)
}

plot(Exponential(), type="l", main="Exponential growth")
**********************************************************************

Testing browse.R...

Output (only first 500 characters): 


**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Code ran without errors

Time consumed = 0.23964s

======================================================================
Inspecting script file GPDD_Data.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: GPDD_Data.R
# Created: Oct 2020
# Description: Mapping the Global Population Dynamics Database (GPDD)

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# install the maps package
#install.packages("maps")

# load the required package
library(maps)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)

# load the data
load("../data/GPDDFiltered.RData")
#class(df) 

# create a world map
# Method 1:
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey 50", fill = "grey 100") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.5))

#world # Show the graph
#dev.off()

# Method 2:
#pdf("../sandbox/GPDD_map.pdf", 8, 10) # dave the results
#maps::map(database = "world", fill=TRUE, col="lightgrey", border="darkgray",
#          bg = "lightblue", xlim = c(-180, 180), ylim = c(-90, 90), wrap=c(-180,180))
# add species from gpdd
#points(x = gpdd$long, y = gpdd$lat, col=alpha("darkgreen", 0.6), lwd=2)
#dev.off()
# what biases might you expect in any analysis based on the data represented?
# # The data locations spreads more along the seaside, and not evenly distributed, 
# more focused on the northern temperate zone,
# therefore, for the terrestrial and freshwater habitats, or the other temperature zones may not accurate due to the lack of data


**********************************************************************

Testing GPDD_Data.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ tibble  3.1.1     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
✔ purrr   0.3.4     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
✖ purrr::map()    masks maps::map()

======================================================================
Inspecting script file PP_Regress.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: PP_Regress.R
# Created: Oct 2020
# Description: Predator-Prey Regression

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# load the required package
library(ggplot2)

# launch R and read in these data to a data frame (note the relative path):
MyDF = read.csv("../data/EcolArchives-E089-51-D1.csv")
# change the type of certain columns to factor because we will want to use them as grouping variables:
MyDF$Type.of.feeding.interaction = as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location = as.factor(MyDF$Location)

# plot the graph and save as .pdf
p = qplot(Prey.mass, Predator.mass, data=MyDF, facets = Type.of.feeding.interaction ~., colour = Predator.lifestage, log="xy", geom="point", shape=I(3), xlab = "Prey Mass in grams", ylab = "Predator Mass in grams") 
p + geom_smooth(method="lm", fullrange=T) +
  theme_bw() +
  theme(legend.position = "bottom") + 
  guides(col = guide_legend(nrow = 1))
graphics.off()
# save the plot
ggsave("PP_Regress.pdf", path = "../results/")

# calculate the regression results corresponding to the lines fitted in the figure
output = data.frame()
for(i in unique(MyDF$Predator.lifestage)){ # remove the duplicate rows
  life = subset(MyDF, Predator.lifestage == i)
  for(n in unique(life$Type.of.feeding.interaction)){ # remove the duplicate rows
    feed = subset(life, Type.of.feeding.interaction == n)
    # concatenate the two string values by separating with delimiters with paste()
    print(paste(feed$Predator.lifestage[1], feed$Type.of.feeding.interaction[1])) 
    # summarize the values in the dataframe
    Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = feed))
    if(is.null(Summ$fstatistic[1])){
      fvalue = "NA" # using 'NA' to value the empty 
    }else{fvalue = as.numeric(Summ$fstatistic[1])}
    dataframe = data.frame(
      n,
      i,
      r2 = Summ$r.squared,
      inter = Summ$coefficients[1],
      slope = Summ$coefficients[2],
      pvalue = Summ$coefficients[8],
      fvalue = fvalue)
    output = rbind(output, dataframe)
  }
}
names(output) = c("Type of Feeding Interaction", "Predator Lifestage", "R2", "intercept", "slope", "p-value", "F-value")

# save the results as .csv
write.csv(output, "../results/PP_Regress_Results.csv", row.names = F)


**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 


**********************************************************************
[1] "adult predacious/piscivorous"
[1] "adult piscivorous"
[1] "adult predacious"
[1] "adult planktivorous"
[1] "juvenile piscivorous"
[1] "juvenile planktivorous"
[1] "juvenile predacious"
[1] "larva predacious"
[1] "larva planktivorous"
[1] "larva / juvenile predacious"
[1] "larva / juvenile planktivorous"
[1] "larva / juvenile piscivorous"
[1] "larva / juvenile insectivorous"
[1] "postlarva/juvenile predacious"
[1] "postlarva/juvenile planktivorous"
[1] "postlarva/juvenile piscivorous"
[1] "po
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: In qt((1 - level)/2, df) : NaNs produced
2: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Saving 7 x 7 in image
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: In qt((1 - level)/2, df) : NaNs produced
2: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

======================================================================
Inspecting script file get_TreeHeight.R...

File contents are:

**********************************************************************
#!/usr/bin/env R

# Title: get_TreeHeight.R
# Author details: Jooyoung Ser (jooyoung.ser19@imperial.ac.uk), Elliott Parnell (elliott.parnell22@imperial.ac.uk), Anqi Wang (anqi.wang22@imperial.ac.uk), Linke Feng (L.feng22@imperial.ac.uk)
# Date: Nov 2022
# Script and data info:
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
# height = distance * tan(radians)
# Arguments: 1 or 0
# args: csv; degrees: the angle of elevation of tree; distance: the distance from base of tree
# OUTPUT
# The heights of the tree, same units as "distance"


rm(list = ls())

# Function: calculate tree heights
TreeHeight <- function(degrees, distance) {
    radians <- degrees * pi / 180
    height <- distance * tan(radians)
    return (height)
}

# Read data from commandline
args<-commandArgs(trailingOnly=TRUE)

# if no input file, exit directly
if (length(args) != 1) { 
  stop("One(just one) .csv file needed.", call.=F)
} else {
  TreeData <- read.csv(args)
}

TreeData <- read.csv(file = args[1])

# Add a new column and calculate the tree height 
TreeData$Tree.Height.m <- TreeHeight(TreeData$Angle.degrees, TreeData$Distance.m)

# Create a csv output 
write.csv(TreeData, paste("../results/", tools::file_path_sans_ext(basename(args)), "_treeheights_R.csv",sep = ""), row.names = F)


**********************************************************************

Testing get_TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error: One(just one) .csv file needed.
Execution halted

======================================================================
Inspecting script file Vectorize2.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: Vectorize2.R
# Created: Oct 2020
# Description: In-class vectorized function 2: Runs the stochastic Ricker equation with gaussian fluctuations

rm(list = ls()) # Clean the workplace

stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{

  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix

  N[1, ] <- p0

  for (pop in 1:length(p0)) { #loop through the populations

    for (yr in 2:numyears){ #for each pop, loop through the years

      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)

}

print("Non-Vectorized Stochastic Ricker takes:")
print(system.time(res1<-stochrick()))

# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 

stochrickvector1 <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))
  N[1, ] <- p0
  for (yr in 2:numyears){ #for each pop, loop through the years
    N[yr,] <- N[yr-1,] * exp(r * (1 - N[yr - 1,] / K) + rnorm(1,0,sigma)) # add one fluctuation from normal distribution
 }
return(N)
}
#print(stochrickvector1())

stochrickvector2 <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, 1000)
  N[1, ] <- p0
  for (pop in 2:1000){ #loop through the populations
    N[,pop] <- N[,pop-1] * exp(r * (1 - N[,pop-1] / K) + rnorm(1,0,sigma))
  }
return(N)
}
#print(stochrickvector2())

print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
print("Vectorized Stochastic Ricker1 takes:")
print(system.time(res21<-stochrickvector1()))
print("Vectorized Stochastic Ricker2 takes:")
print(system.time(res21<-stochrickvector2()))


**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Non-Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.221   0.028   0.249 
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.186   0.000   0.187 
[1] "Vectorized Stochastic Ricker1 takes:"
   user  system elapsed 
  0.009   0.001   0.010 
[1] "Vectorized Stochastic Ricker2 takes:"
   user  system elapsed 
  0.012   0.000   0.012 

**********************************************************************

Code ran without errors

Time consumed = 0.77218s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: DataWrangTidy.R
# Created: Oct 2020

################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
#rm(list = ls())
require(tidyverse)

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

as_tibble(MyData) # ≈ head(MyData)
# tidyverse equivalent to head(MyData) as it displays the first 10 lines, but head is better
dim_desc(MyData) # ≈ dim()
# dimensions 
dplyr::glimpse(MyData) 
# compactly display the structure
# like str(), but nicer!
# dbl means double precision floating point number
utils::View(MyData) # ≈ fix()
# you can also do this
utils::View(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) #Swaps rows and columns around
head(MyData)
dim(MyData)
# no viable way to do it in tidyverse

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

#TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
#colnames(TempData) <- MyData[1,] # assign column names from original data

TempData <- tibble::as_tibble(MyData[-1,],stringsAsFactors = FALSE) 
colnames(TempData) <- MyData[1,] # assign column names as actual column names from original data
# tidyverse works in this case with rename but the origin method is better

############# Convert from wide to long format  ###############
#require(reshape2) # load the reshape2 package
#
#?melt #check out the melt function
#
#MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

#tidyr gather
MyWrangledData2=gather(TempData,key = "Species", value = "Count", 5:ncol(TempData))
# or
MyWrangledData <- tidyr::pivot_longer(TempData, cols=5:45,names_to="Species",values_to="Count")

#dplyr mutate
MyWrangledData2 = MyWrangledData2 %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot=as.factor(Plot), Quadrat=as.factor(Quadrat), Count= as.numeric(Count))


#MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
#MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
#MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
#MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
#MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

################## In-class practical #####################
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well 
#
## convert the dataframe to a "tibble"
MyWrangledData <- dplyr::as_tibble(MyWrangledData) 
#MyWrangledData
#
## Same as:
#MyWrangledData <- as_tibble(MyWrangledData) 
#class(MyWrangledData)
#
## Without using ::
#glimpse(MyWrangledData) #like str(), but nicer!
#
## utils::View(MyWrangledData) #same as fix()
#filter(MyWrangledData, Count>100) #like subset(), but nicer!
#
#slice(MyWrangledData, 10:15) # Look at a particular range of data rows
#
##  using tidyverse is using the “pipe” %>% operator to create a compact sequence 
## of manipulations of dataset with dplyr:
#MyWrangledData %>%
#  group_by(Species) %>%
#  summarise(avg = mean(Count))
#
## the same as the following command using base R (not using dplyr at all):
#aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean) 
################################################################################

############ Coerce column types ####################

# It is necessary because the stringsAsFactors are set to false at the beginning to avoid it converting unwanted sections
# this means we must specify which parts we do want as factors

MyWrangledData <- MyWrangledData %>%
  mutate(across(c(Cultivation, Block, Plot, Quadrat, Species), as.factor))
# uses across to apply the same function (as.factor) to mutate multiple columns

MyWrangledData <- MyWrangledData %>%
  mutate(across(c(Count), as.integer))

############# Exploring the data (extend the script below)  ###############

#require(tidyverse) # should be put at first begining, here as an example
#tidyverse_packages(include_self = T)
#tibble::as_tibble(MyWrangledData)
#dplyr::glimpse(MyWrangledData) # dbl means double precision floating point number
#dplyr::filter(MyWrangledData, Count>100)
#dplyr::slice(MyWrangledData,10:15)

MyWrangledData <- tibble::as_tibble(MyWrangledData)
# a tibble in tidyverse is equivalent to R's traditional dataframe
# recommend but not need to convert dataframe to tibble to use tidyverse
# tibbles are lazy data frames that do less
# tibbles don't change variable types or names
# tibbles complain more (e.g. when a variable doesn't exist)
# tibble displays data along with data type while displaying 
# whereas data frames do not

MyWrangledData

dplyr::glimpse(MyWrangledData) 

dplyr::filter(MyWrangledData, Count>100) # ≈ subset(), but nicer!

dplyr::slice(MyWrangledData, 10:15) # Look at an arbitrary set of data rows


**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: tidyverse
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.6     ✔ purrr   0.3.4
✔ tibble  3.1.1     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()

======================================================================
Inspecting script file break.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: break.R
# Created: Oct 2020
# Description: In-class practical using 'break'.

i <- 0
while (i < Inf) {
  if (i == 10){
    break
  } else {
    cat("i equals ", i, "\n")
    i <- i + 1
  }
}


**********************************************************************

Testing break.R...

Output (only first 500 characters): 


**********************************************************************
i equals  0 
i equals  1 
i equals  2 
i equals  3 
i equals  4 
i equals  5 
i equals  6 
i equals  7 
i equals  8 
i equals  9 

**********************************************************************

Code ran without errors

Time consumed = 0.26131s

======================================================================
Inspecting script file run_get_TreeHeight.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Elliott Parnell (elliott.parnell22@imperial.ac.uk), Jooyoung Ser (jooyoung.ser19@imperial.ac.uk), Anqi Wang (anqi.wang22@imperial.ac.uk), Linke Feng (L.feng22@imperial.ac.uk)
# Script: run_get_TreeHeight.sh
# Desc: A Unix shell script that tests get_TreeHeight.R and get_TreeHeight.py using a default input or an input file
# Arguments: Optional input file
# Date: Nov 2022


echo -e "trees.csv will be tested as an example:\n"

# run R vsersion
echo -e "Testing get_TreeHeight.R...\n"
Rscript get_TreeHeight.R ../data/trees.csv
echo -e "Done! Find output file in results directory\n"


# run python version
echo -e "Testing get_TreeHeight.py... \n"
python3 get_TreeHeight.py ../data/trees.csv
echo -e "Done! Find output file in results directory\n"


**********************************************************************

Testing run_get_TreeHeight.sh...

Output (only first 500 characters): 


**********************************************************************
trees.csv will be tested as an example:

Testing get_TreeHeight.R...

Done! Find output file in results directory

Testing get_TreeHeight.py... 

Done! Find output file in results directory


**********************************************************************

Code ran without errors

Time consumed = 0.44634s

======================================================================
Inspecting script file DataWrang.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: DataWrang.R
# Created: Oct 2020

################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
#head(MyWrangledData); tail(MyWrangledData)

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

########################################## In-class practical ##################
#require(tidyverse)
#tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well 
#
## convert the dataframe to a "tibble"
#MyWrangledData <- dplyr::as_tibble(MyWrangledData) 
#MyWrangledData
#
## Same as:
#MyWrangledData <- as_tibble(MyWrangledData) 
#class(MyWrangledData)
#
## Without using ::
#glimpse(MyWrangledData) #like str(), but nicer!
#
## utils::View(MyWrangledData) #same as fix()
#filter(MyWrangledData, Count>100) #like subset(), but nicer!
#
#slice(MyWrangledData, 10:15) # Look at a particular range of data rows
#
##  using tidyverse is using the “pipe” %>% operator to create a compact sequence 
## of manipulations of dataset with dplyr:
#MyWrangledData %>%
#  group_by(Species) %>%
#  summarise(avg = mean(Count))
#
## the same as the following command using base R (not using dplyr at all):
#aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean) 
################################################################################


############# Exploring the data (extend the script below)  ###############
require(tidyverse)
tidyverse_packages(include_self = T)
tibble::as_tibble(MyWrangledData)
dplyr::glimpse(MyWrangledData) # dbl means double precision floating point number
dplyr::filter(MyWrangledData, Count>100)
dplyr::slice(MyWrangledData,10:15)

# In-class practical, all R script will first import required packages using library() or require()
**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00812s

======================================================================
Inspecting script file Compile_Florida.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: ANQI WANG aw222@ic.ac.uk
# Script: Compile_Florida.sh
# Description: Bash script to compile Florida.tex LaTeX, pdf output
# Arguments: 0 (specific for Florida.tex)

# run R script, graphics will be saved to results directory - used in .tex
Rscript Florida.R

# Compile the LaTeX
pdflatex Florida.tex
pdflatex Florida.tex
#pdflatex Florida.tex

# no required biblioraphy for this .tex

rm *.aux
rm *.log
rm *.synctex.gz
**********************************************************************

Testing Compile_Florida.sh...

Output (only first 500 characters): 


**********************************************************************
[1] "ats"
[1] "data.frame"
  Year     Temp
1 1901 23.75000
2 1902 24.66667
3 1903 24.71667
4 1904 24.51667
5 1905 24.88333
6 1906 24.63333
[1] "Correlation coefficient for Year and Temp is:"
[1] 0.5331784
[1] "The Approximate, asymptomatic p-value is:"
numeric(0)
pdf 
  2 
pdf 
  2 
pdf 
  2 
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(./Florida.tex
LaTeX2e <2021-11-15> patch level 1
L
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.6     ✔ purrr   0.3.4
✔ tibble  3.1.1     ✔ dplyr   1.0.6
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   1.4.0     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
rm: cannot remove '*.synctex.gz': No such file or directory

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Anqi Wang aw222@ic.ac.uk
# Script: CompileLaTeX.sh
# Description: Compiles latex with bibtex
#
# Outputs: pdf latex file
# Arguments: 1 (.tex latex code)
# Date: Oct 11th 2022

#set a variable so that it can be manipulated to remove the suffix
#remove the suffix and use it as a new input x
x=${1%.tex}

pdflatex $x.tex
bibtex $x
pdflatex $x.tex
pdflatex $x.tex
# evince $x.pdf &

## Cleanup
rm *.aux
rm *.log
rm *.bbl
rm *.blg
rm *.dvi
rm *.nav
rm *.out
rm *.toc
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 


**********************************************************************
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(/usr/share/texlive/texmf-dist/tex/latex/tools/.tex
LaTeX2e <2021-11-15> patch level 1
L3 programming layer <2022-01-21> File ignored)
*
! Emergency stop.
<*> .tex
        
!  ==> Fatal error occurred, no output PDF file produced!
Transcript written on .log.
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded 
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

bibtex: Need exactly one file argument.
Try `bibtex --help' for more information.
rm: cannot remove '*.aux': No such file or directory
rm: cannot remove '*.log': No such file or directory
rm: cannot remove '*.bbl': No such file or directory
rm: cannot remove '*.blg': No such file or directory
rm: cannot remove '*.dvi': No such file or directory
rm: cannot remove '*.nav': No such file or directory
rm: cannot remove '*.out': No such file or directory
rm: cannot remove '*.toc': No such file or directory

======================================================================
Inspecting script file Florida.tex...

File contents are:

**********************************************************************
\documentclass[12]{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{float}
\usepackage[a4paper,
            left=1in,
            right=1in,
            top=0.5in,
            bottom=1in,]{geometry}



\title{Is Florida Getting Warmer?}
\author{Anqi Wang}
\date{Oct, 2022}

\begin{document}
	\maketitle

	\section{Results}
	The Pearson correlation coefficient was used to determine whether there was a positive correlation between Year and Temperature in Key West, Florida. The correlation coefficient of the Temperature data throughout the years in the 20th century was 0.53317 (to 5 s.f.), and a permutation analysis (Figure 1) of 1000 shuffled populations was used to determine the approximate, asymptotic, one-tailed P-value of 0.

	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.75]{../results/atsplot.pdf}
		\caption{Raw data of Temperature over time}
	\end{figure}

	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.75]{../results/allcoeffs.pdf}
		\caption{Coefficients}
	\end{figure}

	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.75]{../results/AsymptoticPValue.pdf}
		\caption{Histogram of Coefficients}}
	\end{figure}

	\section{Discussion}
	The null hypothesis that there is no relationship between Time and Temperature in Key West, Florida, USA can be reject due to the small P-value below 0.05, and instead there is a statistically significant positive correlation between the two variables.\\
	The positive correlation indicated between Year and Temperature in Key West is statistically significant. \\
	Moreover, these results suggest that the temperature was increasing over time in Key West, Florida, USA, in the 20th century.

\end{document}

**********************************************************************

Testing Florida.tex...

======================================================================
Inspecting script file TreeHeight.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: TreeHeight.R
# Created: Oct 2020
# Description: Calculates tree heights for all trees in the data and save the results in .csv file

# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

#################################### Original
#TreeHeight <- function(degrees, distance) {
#  radians <- degrees * pi / 180
#  height <- distance * tan(radians)
#  print(paste("Tree height is:", height))
#  
#  return (height)
#}
#
#TreeHeight(37, 40)
################################################

# Improvement
MyData <- read.csv ("../data/trees.csv", header = T)
Species = MyData$Species
Distance.m = MyData$Distance.m
Angle.degrees = MyData$Angle.degrees

TreeHeight <- function(degrees, distance) {
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  print(paste("The $Species tree height is:", height))
  
  return (height)
}

Tree.Height.m = TreeHeight(Angle.degrees, Distance.m)
TreeHts = data.frame(Species, Distance.m, Angle.degrees, Tree.Height.m)
names(TreeHts) = c("Species", "Distance.m", "Angle.degrees", "Tree.Hight.m")
TreeHts

write.table(TreeHts, "../results/TreeHts.csv", row.names = F)
**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************
  [1] "The $Species tree height is: 27.8021161438536"
  [2] "The $Species tree height is: 45.2460250644405"
  [3] "The $Species tree height is: 14.6654828109493"
  [4] "The $Species tree height is: 14.9341751666304"
  [5] "The $Species tree height is: 35.9703591412599"
  [6] "The $Species tree height is: 32.4102133664874"
  [7] "The $Species tree height is: 17.4582436344144"
  [8] "The $Species tree height is: 30.1373803987097"
  [9] "The $Species tree height is: 20.3124778877177"
 [10] "The $Spe
**********************************************************************

Code ran without errors

Time consumed = 0.19745s

======================================================================
Inspecting script file basic_io.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: basic_io.R
# Created: Oct 2020
# Description: A simple script to illustrate R input-output.
# Run line by line and check inputs outputs to understand what is happening  

MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers

write.csv(MyData, "../results/MyData.csv") #write it out as a new file

write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE, col.names = FALSE) # Append to it

write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names

write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.19512s

======================================================================
Inspecting script file Vectorize1.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: Vectorize1.R
# Created: Oct 2020
# Description: In-class vectorized function 1: comparing the run-time of a non-vectorized

M <- matrix(runif(1000000),1000,1000)

SumAllElements <- function(M) {
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]) {
    for (j in 1:Dimensions[2]) {
      Tot <- Tot + M[i,j]
    }
  }
  return (Tot)
}

print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops, the time taken is:"
   user  system elapsed 
  0.071   0.000   0.070 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.001   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.32346s

======================================================================
======================================================================
Finished running scripts

Ran into 17 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!