Starting code feedback for Anqi, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.61 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, week3, .git, week1, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*.tmp
*.log
.DS_Store
*/sandbox
.vscode
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Anqi's CMEE Coursework Repository
This README file contains details about the modules within Anqi Wang's (aw222@ic.ac.uk) CMEE Coursework. This coursework contributes towards the fulfilment of MSc Computational Methods in Ecology and Evolution (CMEE) at Imperial College London. <br />

Many of the task requirements can be found at https://mhasoba.github.io/TheMulQuaBio/intro.htm


## Contents
### Week 1: UNIX, Shell scription, LaTeX and Version Control with Git
**Summary:** A brief introduction of the Multilingual Quantitative Biological Methods, UNIX basic knowledge, Introductory shell scripting exercises, Produce scientific documents with LaTeX, and Use version control (Git) to share the files with others<br />
**Language Use:** Bash, LaTex

---

### Week 2: 
**Summary:** Introduction to writing Python scripts/programs<br />
**Language Use:** Python, Bash

---

### Week 3:
**Summary:** Biological Computing in R, Data management amd Visualization with R.<br />
**Language Use** R, LaTeX, Bash

## Language Versions
**Python:** 3.9.12 <br />
**R:** 4.2.1 <br />
**bash:** 3.2 <br />
**LaTeX:** 3.141592653-2.6-1.40.24 (TeX Live 2022) <br />
**Jupyter:** Notebook 6.4.8 <br />

All code has been written on a MacOS version 12.6 and any dependencies are detailed below the script names within weekly README files


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: code, data, results

Found the following files: .gitignore, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework - week 3:

This README file contains details about the scripts from in-classwork and practicals for the third week.

## Description
More information about the R scripts and programs for coursework in **Biological Computing in R** section of the Computing Chapter and **Data Management and Visualization** section of Basic Data Analysis and Statistics Chapter of [The Mulitilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/intro.html)

## Language

R, LaTex

## Dependencies
For some scripts in this directory, packages [tidyverse](https://cran.r-project.org/web/packages/tidyverse/index.html), [ggplot2](https://cran.r-project.org/web/packages/ggplot2/index.html), [reshape2](https://cran.r-project.org/web/packages/reshape2/index.html), [maps](https://cran.r-project.org/web/packages/maps/index.html), and [sqldf](https://cran.r-project.org/web/packages/sqldf/index.html) are required. 
Please run the following script in **R/RStudio** for package installation: 
```R
install.packages(c("tidyverse", "ggplot2", "reshape2", "maps", "sqldf"))
```

[LaTeX](https://www.latex-project.org/) installation is also required. Please run following **bash** script in Terminal for installation:
```bash
brew install texlive-full texlive-fonts-recommended texlive-pictures texlive-latex-extra imagemagick
```

_The installation commands are used for MacOS, may varied with the different operating system._

## R
### Biological Computing in R:

#### apply1.R:
<font size=2>**Summary:** Applying a function to the rows or columns of a matrix.<br />
**Input:** n/a <br />
**Output:** Results prints to terminal.<br />
**Running Instructions:** Rscript apply1.R <br /><br /></font>

#### apply2.R:
<font size=2>**Summary:** Using apply to define own functions. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal <br />
**Running Instructions:** Rscript apply2.R <br /><br /></font>

#### basic_io.R:
<font size=2>**Summary:** A simple script to illustrate R input-output and the use of read() and write() functions. <br />
**Input:** n/a <br />
**Output:** MyData.csv in /results. <br />
**Running Instructions:** Rscript basic_io.R <br /><br /></font>

#### boilerplate.R:
<font size=2>**Summary:** boilerplate R script.<br />
**Input:** n/a <br />
**Output:** Results prints to terminal. <br />
**Running Instructions:** Rscript boilerplate.R </font>

#### break.R:
<font size=2>**Summary:** R loop demonstration. <br />
**Input:** n/a <br />
**Output:** Results prints to terminal. <br />
**Running Instructions:** Rscript break.R <br /><br /></font>

#### browse.R:
<font size=2>**Summary:** sing the browser() function to debug by examining local variables.<br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript browse.R <br /><br /></font>

#### control_flow.R:
<font size=2>**Summary:** Demonstrating control flow tools. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript control_flow.R <br /><br /></font>

#### Florida.R:
<font size=2>**Summary:** Calculates correlation coefficient between temperature and time for the 20th century in Key West, Florida and uses a permutation analysis to calculate the P-value.<br />
**Input:** KeyWestAnnualMeanTemperature.RData in /data. <br />
**Dependencies:** tidyverse <br />
**Output:** Result prints to terminal and saves figures in results.<br />
**Running Instructions:** Rscript Floria.R <br /><br /></font>

#### next.R:
<font size=2>**Summary:** using 'next' to skip to next iteration of for loop. Only prints odd numbers <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript next.R <br /><br /></font>

#### preallocation.R:
<font size=2>**Summary:** Compares times of pre-allocation to no pre-allocation. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript preallocation.R <br /><br /></font>

#### R_conditionals.R:
<font size=2>**Summary:** Functions with conditionals examples. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript R_conditionals.R <br /><br /></font>

#### Ricker.R:
<font size=2>**Summary:** Plots the ricker model. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript Ricker.R <br /><br /></font>

#### sample.R:
<font size=2>**Summary:** Explains sys.argv in a practical way. <br />
**Input:** n/a <br />
**Output:** n/a <br />
**Running Instructions:** Rscript sample.R <br /><br /></font>

#### TreeHeight.R:
<font size=2>**Summary:** alculating heights of trees given distance of each tree from its base and angle to its top, using  the trigonometric formula. <br />
**Input:** trees.csv in /data <br />
**Output:** TreeHts.csv in /results.<br />
**Running Instructions:** Rscript TreeHeight.R <br /><br /></font>

#### try.R:
<font size=2>**Summary:** illustrates try. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript try.R <br /><br /></font>

#### Vectorize1.R:
<font size=2>**Summary:** Sums all elements of a matrix. Compares sum() and a sum function. <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript Vectorize1.R <br /><br /></font>

#### Vectorize2.R:
<font size=2>**Summary:** Vectorizes the ricker model and adds fluctuation <br />
**Input:** n/a <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript Vectorize2.R <br /><br /></font>


### Data Management and Visualization:

#### DataWrang.R:
<font size=2>**Summary:** Examples of loops and conditionals combined. <br />
**Input:** PoundHillData.csv, PoundHillMetaData.csv from /data. <br />
**Dependencies:** reshape2 <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript DataWrang.R <br /><br /></font>

#### DataWrangTidy.R:
<font size=2>**Summary:** Wrangling the pound hill dataset using tidyverse. <br />
**Input:** PoundHillData.csv, PoundHillMetaData.csv from /data. <br />
**Dependencies:** tidyverse <br />
**Output:** Result prints to terminal.<br />
**Running Instructions:** Rscript DataWrangTidy.R <br /><br /></font>

#### ggthemes.R:
<font size=2>**Summary:** Introduction of ggthemes which could provides some additional geoms, scales, and themes for ggplot. <br />
**Input:** n/a <br />
**Dependencies:** ggplot2 <br />
**Output:** MyBars.pdf figure in results. <br />
**Running Instructions:** Rscript ggthemes.R <br /><br /></font>

#### Girko.R:
<font size=2>**Summary:** Plotting two dataframes together. <br />
**Input:** n/a <br />
**Dependencies:** ggplot2 <br />
**Output:** Girko.pdf figure in results (plot print in the view window).<br />
**Running Instructions:** Rscript Girko.R <br /><br /></font>

#### GPDD_Data.R:
<font size=2>**Summary:** apping the Global Population Dynamics Database (GPDD) with [maps](https://cran.r-project.org/web/packages/maps/index.html). <br />
**Input:** GPDDFiltered.RData in /data <br />
**Dependencies:** maps, ggplot2, mapdata
**Output:** worldmap.pdf in results. <br />
**Running Instructions:** Rscript GPDD_Data.R <br /><br /></font>

#### MyBars.R:
<font size=2>**Summary:** Annotating a plot. <br />
**Input:** Results.txt from /data <br />
**Dependencies:** ggplot2 <br />
**Output:** MyBars.pdf figure in results. (plot print in the view window).<br />
**Running Instructions:** Rscript MyBars.R <br /><br /></font>

#### PlotLin.R:
<font size=2>**Summary:** Annotates a linear regression plot <br />
**Input:** n/a <br />
**Dependencies:** ggplot2 <br />
**Output:** Figure 'MyLinReg.pdf' in results. (plot print in the view window).<br />
**Running Instructions:** Rscript PlotLin.R <br /><br /></font>

#### PP_Dists.R:
<font size=2>**Summary:** Creating three figures, each containing subplots of distributions of predator mass, prey mass, and the size ratio of prey mass over predator mass by feeding interaction type. And calculating the mean and median log predator mass, prey mass, and predator-prey size ratio, by feeding type. <br />
**Input:** EcolArchives from /data <br />
**Dependencies:** ggplot2 <br />
**Output:** Pdf figures (Pred_Subplots.pdf, Prey_Subplots.pdf, SizeRatio_Subplots.R) and regression results (PP_Results.csv) in results <br />
**Running Instructions:** Rscript PP_Dists.R <br /><br /></font>

#### PP_Regress.R:
<font size=2>**Summary:** Plotting analysis subsetted by the Predator.lifestage, and calculate the regression results corresponding to the lines fitted. <br />
**Input:** EcolArchives from data <br />
**Dependencies:** ggplot2 <br />
**Output:** PP_Regress_Results.csv and PP_Regress.pdf in results. <br />
**Running Instructions:** Rscript PP_Regress.R <br /><br /></font>

#### SQLinR.R:
<font size=2>**Summary:** Plot with sqlite package. <br />
**Input:** Resource.csv from /data. <br />
**Dependencies:** sqlite, ggplot2 <br />
**Output:** Result prints to terminal and a table name "Resource" is wrote .<br />
**Running Instructions:** Rscript SQLinR.R <br /><br /></font>

## LaTeX

#### Florida_warming.tex:
<font size=2>**Summary:** LaTeX code writeup file for results and their interpretation from Florida.R <br />
**Input:** Florida.R output figures in /results <br />
**Output:** Can be compiled into LaTeX file. <br />
**Running Instructions:** To be compiled with LaTeX <br /><br /></font>


## Author & Contact

<font size=2>**Name:** ANQI WANG<br />
**Email:** aw222@ic.ac.uk</font>
**********************************************************************

Results directory is empty - good! 

Found 28 code files: Girko.R, Vectorize1.R, Florida.tex, TreeHeight.R, ggthemes.R, apply2.R, PP_Regress.R, browse.R, boilerplate.R, control_flow.R, DataWrangTidy.R, Vectorize2.R, preallocation.R, SQLinR.R, PP_Dists.R, try.R, MyBars.R, Ricker.R, break.R, apply1.R, basic_io.R, DataWrang.R, plotLin.R, GPDD_Data.R, Florida.R, next.R, sample.R, R_conditionals.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file Girko.R...

File contents are:

**********************************************************************
## Plotting two dataframes together ##
# According to Girko’s circular law, the eigenvalues of a matrix M of size N×N
# are approximately contained in a circle in the complex plane with radius N. 
# Let’s draw the results of a simulation displaying this result.

# First, build a function object that will calculate the ellipse (the perdicted bounds of the eigenvalues):
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}

N <- 250 # Assign size of the matrix

M <- matrix(rnorm(N * N), N, N) # Build the matrix

eigvals <- eigen(M)$values # Find the eigenvalues

eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe

my_radius <- sqrt(N) # The radius of the circle is sqrt(N)

ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse

names(ellDF) <- c("Real", "Imaginary") # rename the columns

# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")

# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p

# Save the plot
ggsave("Girko.pdf", path = "../results")


**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(eigDF, aes(x = Real, y = Imaginary)) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file Vectorize1.R...

File contents are:

**********************************************************************
M <- matrix(runif(1000000),1000,1000)

SumAllElements <- function(M) {
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]) {
    for (j in 1:Dimensions[2]) {
      Tot <- Tot + M[i,j]
    }
  }
  return (Tot)
}

print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops, the time taken is:"
   user  system elapsed 
  0.173   0.001   0.174 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.002   0.000   0.002 

**********************************************************************

Code ran without errors

Time consumed = 0.64656s

======================================================================
Inspecting script file Florida.tex...

File contents are:

**********************************************************************
\documentclass[12]{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{float}
\usepackage[a4paper,
            left=1in,
            right=1in,
            top=0.5in,
            bottom=1in,]{geometry}



\title{Is Florida Getting Warmer?}
\author{Anqi Wang}
\date{Oct, 2022}

\begin{document}
	\maketitle

	\section{Results}
	The Pearson correlation coefficient was used to determine whether there was a positive correlation 		between Year and Temperature in Key West, Florida. The correlation coefficient of the Temperature 		data throughout the years in the 20th century was 0.53317 (to 5 s.f.), and a permutation analysis (		Figure 1) of 1000 shuffled populations was used to determine the approximate, asymptotic, one-		tailed P-value of 0.

	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.75]{../results/atsplot.pdf}
		\caption{Raw data of Temperature over time}
	\end{figure}

	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.75]{../results/allcoeffs.pdf}
		\caption{Coefficients}
	\end{figure}

	\begin{figure}[H]
		\centering
		\includegraphics[scale=0.75]{../results/AsymptoticPValue.pdf}
		\caption{Histogram of Coefficients}}
	\end{figure}

	\section{Discussion}
	The null hypothesis that there is no relationship between Time and Temperature in Key West, Florida, 	USA can be reject due to the small P-value below 0.05, and instead there is a statistically significant 		positive correlation between the two variables.\\
	The positive correlation indicated between Year and Temperature in Key West is statistically 			significant. \\
	Moreover, these results suggest that the temperature was increasing over time in Key West, Florida, 	USA, in the 20th century.

\end{document}

**********************************************************************

Testing Florida.tex...

======================================================================
Inspecting script file TreeHeight.R...

File contents are:

**********************************************************************
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

#################################### Original
#TreeHeight <- function(degrees, distance) {
#  radians <- degrees * pi / 180
#  height <- distance * tan(radians)
#  print(paste("Tree height is:", height))
#  
#  return (height)
#}
#
#TreeHeight(37, 40)
################################################

# Improvement
MyData <- read.csv ("../data/trees.csv", header = T)
Species = MyData$Species
Distance.m = MyData$Distance.m
Angle.degrees = MyData$Angle.degrees

TreeHeight <- function(degrees, distance) {
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  print(paste("The $Species tree height is:", height))
  
  return (height)
}

Tree.Height.m = TreeHeight(Angle.degrees, Distance.m)
TreeHts = data.frame(Species, Distance.m, Angle.degrees, Tree.Height.m)
names(TreeHts) = c("Species", "Distance.m", "Angle.degrees", "Tree.Hight.m")
TreeHts

write.table(TreeHts, "../results/TreeHts.csv", row.names = F)
**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************
  [1] "The $Species tree height is: 27.8021161438536"
  [2] "The $Species tree height is: 45.2460250644405"
  [3] "The $Species tree height is: 14.6654828109493"
  [4] "The $Species tree height is: 14.9341751666304"
  [5] "The $Species tree height is: 35.9703591412599"
  [6] "The $Species tree height is: 32.4102133664874"
  [7] "The $Species tree height is: 17.4582436344144"
  [8] "The $Species tree height is: 30.1373803987097"
  [9] "The $Species tree height is: 20.3124778877177"
 [10] "The $Spe
**********************************************************************

Code ran without errors

Time consumed = 0.47219s

======================================================================
Inspecting script file ggthemes.R...

File contents are:

**********************************************************************
## ggthemes ##

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# install the package
install.packages("ggthemes")
# load the data
MyDF = read.csv("../data/EcolArchives-E089-51-D1.csv")

# the try:
library(ggthemes)

p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass),
                      colour = Type.of.feeding.interaction )) +
  geom_point(size=I(2), shape=I(10)) + theme_bw()

p + geom_rangeframe() + # now fine tune the geom to Tufte's range frame
  theme_tufte() # and theme to Tufte's minimal ink theme    

**********************************************************************

Testing ggthemes.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Installing package into ‘/usr/local/lib/R/site-library’
(as ‘lib’ is unspecified)
Warning in install.packages("ggthemes") :
  'lib = "/usr/local/lib/R/site-library"' is not writable
Error in install.packages("ggthemes") : unable to install packages
Execution halted

======================================================================
Inspecting script file apply2.R...

File contents are:

**********************************************************************
SomeOperation <- function(v) { # when the sum of v greater than 0, then return 
  # v*100, otherwise return itself
  if (sum(v) > 0) { #note that sum(v) is a single (scalar) value
    return (v * 100)
  } else { 
    return (v)
  }
}

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))
**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 


**********************************************************************
            [,1]         [,2]      [,3]       [,4]         [,5]        [,6]
 [1,]   60.61981 -1.055188901  10.71572   13.67345  0.642445011 -1.50854663
 [2,]  131.17891 -1.259178656 243.11758   58.15503 -0.006251985  0.21332489
 [3,]  169.95087 -1.693897801  38.76377  -74.97092  0.601248169 -0.62977001
 [4,]   95.37695 -0.122713255 -77.19721 -133.94757  0.413537551 -0.36682243
 [5,] -140.87512  2.043246457 -41.16742   69.04456 -0.457914425 -1.14963599
 [6,]   81.75779  0.169143047 -18.95518  -28.
**********************************************************************

Code ran without errors

Time consumed = 0.47044s

======================================================================
Inspecting script file PP_Regress.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: PP_Regress.R
# Created: Oct 2020

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# load the required package
library(ggplot2)

# launch R and read in these data to a data frame (note the relative path):
MyDF = read.csv("../data/EcolArchives-E089-51-D1.csv")
# change the type of certain columns to factor because we will want to use them as grouping variables:
MyDF$Type.of.feeding.interaction = as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location = as.factor(MyDF$Location)

# plot the graph and save as .pdf
p = qplot(Prey.mass, Predator.mass, data=MyDF, facets = Type.of.feeding.interaction ~., colour = Predator.lifestage, log="xy", geom="point", shape=I(3), xlab = "Prey Mass in grams", ylab = "Predator Mass in grams") 
p + geom_smooth(method="lm", fullrange=T) +
  theme_bw() +
  theme(legend.position = "bottom") + 
  guides(col = guide_legend(nrow = 1))
graphics.off()
# save the plot
ggsave("PP_Regress.pdf", path = "../results/")

# calculate the regression results corresponding to the lines fitted in the figure
output = data.frame()
for(i in unique(MyDF$Predator.lifestage)){ # remove the duplicate rows
  life = subset(MyDF, Predator.lifestage == i)
  for(n in unique(life$Type.of.feeding.interaction)){ # remove the duplicate rows
    feed = subset(life, Type.of.feeding.interaction == n)
    # concatenate the two string values by separating with delimiters with paste()
    print(paste(feed$Predator.lifestage[1], feed$Type.of.feeding.interaction[1])) 
    # summarize the values in the dataframe
    Summ = summary(lm(log(Predator.mass)~log(Prey.mass), data = feed))
    if(is.null(Summ$fstatistic[1])){
      fvalue = "NA" # using 'NA' to value the empty 
    }else{fvalue = as.numeric(Summ$fstatistic[1])}
    dataframe = data.frame(
      n,
      i,
      r2 = Summ$r.squared,
      inter = Summ$coefficients[1],
      slope = Summ$coefficients[2],
      pvalue = Summ$coefficients[8],
      fvalue = fvalue)
    output = rbind(output, dataframe)
  }
}
names(output) = c("Type of Feeding Interaction", "Predator Lifestage", "R2", "intercept", "slope", "p-value", "F-value")

# save the results as .csv
write.csv(output, "../results/PP_Regress_Results.csv", row.names = F)


**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 


**********************************************************************
[1] "adult predacious/piscivorous"
[1] "adult piscivorous"
[1] "adult predacious"
[1] "adult planktivorous"
[1] "juvenile piscivorous"
[1] "juvenile planktivorous"
[1] "juvenile predacious"
[1] "larva predacious"
[1] "larva planktivorous"
[1] "larva / juvenile predacious"
[1] "larva / juvenile planktivorous"
[1] "larva / juvenile piscivorous"
[1] "larva / juvenile insectivorous"
[1] "postlarva/juvenile predacious"
[1] "postlarva/juvenile planktivorous"
[1] "postlarva/juvenile piscivorous"
[1] "po
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: In qt((1 - level)/2, df) : NaNs produced
2: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
Saving 7 x 7 in image
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: In qt((1 - level)/2, df) : NaNs produced
2: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

======================================================================
Inspecting script file browse.R...

File contents are:

**********************************************************************
Exponential <- function(N0 = 1, r = 1, generations = 10) {
  # Runs a simulation of exponential growth
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations) {
    N[t] <- N[t-1] * exp(r)
    browser()
  }
  return (N)
}

plot(Exponential(), type="l", main="Exponential growth")
**********************************************************************

Testing browse.R...

Output (only first 500 characters): 


**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Code ran without errors

Time consumed = 0.52616s

======================================================================
Inspecting script file boilerplate.R...

File contents are:

**********************************************************************
# A boilplate R script

MyFunction <- function(Arg1, Arg2) {
  
  # Statements involving Arg1, Arg2:
  print(paste("Arguement", as.character(Arg1), "is a", class(Arg1))) # set the Arg1 and print Arg1's type
  print(paste("Arguement", as.character(Arg2), "is a", class(Arg2)))
  
  return(c(Arg1, Arg2))
}

MyFunction(1,2) # Test the function
MyFunction("Riki","Tiki") # Double check
**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Arguement 1 is a numeric"
[1] "Arguement 2 is a numeric"
[1] 1 2
[1] "Arguement Riki is a character"
[1] "Arguement Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.43467s

======================================================================
Inspecting script file control_flow.R...

File contents are:

**********************************************************************
a <- TRUE
if (a == TRUE) {
  print ("a is TRUE")
} else {
  print ("a is FALSE")
}

z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}

for (i in 1:10) {
  j <- i * i
  print(paste(i, " squared is", j ))
}

1:10

for(species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii')) {
  print(paste('The species is', species))
}

v1 <- c("a","bc","def")
for (i in v1) {
  print(i)
}

i <- 0
while (i < 10) {
  i <- i+1
  print(i^2)
}


**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 


**********************************************************************
[1] "a is TRUE"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
 [1]  1  2  3  4  5  6  7  8  9 10
[1] "The species is Heliodoxa rubinoides"
[1] "The species is Boissonneaua jardini"
[1] "The species is Sula nebouxii"
[1] "a"
[1] "bc"
[1] "def"
[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100

**********************************************************************

Code ran without errors

Time consumed = 0.45681s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:

**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

as_tibble(MyData) # ≈ head(MyData)
# tidyverse equivalent to head(MyData) as it displays the first 10 lines, but head is better
dim_desc(MyData) # ≈ dim()
# dimensions 
dplyr::glimpse(MyData) 
# compactly display the structure
# like str(), but nicer!
# dbl means double precision floating point number
utils::View(MyData) # ≈ fix()
# you can also do this
utils::View(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) #Swaps rows and columns around
head(MyData)
dim(MyData)
# no viable way to do it in tidyverse

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

#TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
#colnames(TempData) <- MyData[1,] # assign column names from original data

TempData <- tibble::as_tibble(MyData[-1,],stringsAsFactors = FALSE) 
colnames(TempData) <- MyData[1,] # assign column names as actual column names from original data
# tidyverse works in this case with rename but the origin method is better

############# Convert from wide to long format  ###############
#require(reshape2) # load the reshape2 package
#
#?melt #check out the melt function
#
#MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

#tidyr gather
MyWrangledData2=gather(TempData,key = "Species", value = "Count", 5:ncol(TempData))
# or
MyWrangledData <- tidyr::pivot_longer(TempData, cols=5:45,names_to="Species",values_to="Count")

#dplyr mutate
MyWrangledData2 = MyWrangledData2 %>% mutate(Cultivation = as.factor(Cultivation), Block=as.factor(Block), Plot=as.factor(Plot), Quadrat=as.factor(Quadrat), Count= as.numeric(Count))


#MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
#MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
#MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
#MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
#MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

########################################## In-class practical ##################
#require(tidyverse)
#tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well 
#
## convert the dataframe to a "tibble"
#MyWrangledData <- dplyr::as_tibble(MyWrangledData) 
#MyWrangledData
#
## Same as:
#MyWrangledData <- as_tibble(MyWrangledData) 
#class(MyWrangledData)
#
## Without using ::
#glimpse(MyWrangledData) #like str(), but nicer!
#
## utils::View(MyWrangledData) #same as fix()
#filter(MyWrangledData, Count>100) #like subset(), but nicer!
#
#slice(MyWrangledData, 10:15) # Look at a particular range of data rows
#
##  using tidyverse is using the “pipe” %>% operator to create a compact sequence 
## of manipulations of dataset with dplyr:
#MyWrangledData %>%
#  group_by(Species) %>%
#  summarise(avg = mean(Count))
#
## the same as the following command using base R (not using dplyr at all):
#aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean) 
################################################################################

############ Coerce column types ####################

# It is necessary because the stringsAsFactors are set to false at the beginning to avoid it converting unwanted sections
# this means we must specify which parts we do want as factors

MyWrangledData <- MyWrangledData %>%
  mutate(across(c(Cultivation, Block, Plot, Quadrat, Species), as.factor))
# uses across to apply the same function (as.factor) to mutate multiple columns

MyWrangledData <- MyWrangledData %>%
  mutate(across(c(Count), as.integer))

############# Exploring the data (extend the script below)  ###############
##################################### 
#require(tidyverse)
#tidyverse_packages(include_self = T)
#tibble::as_tibble(MyWrangledData)
#dplyr::glimpse(MyWrangledData) # dbl means double precision floating point number
#dplyr::filter(MyWrangledData, Count>100)
#dplyr::slice(MyWrangledData,10:15)

MyWrangledData <- tibble::as_tibble(MyWrangledData)
# a tibble in tidyverse is equivalent to R's traditional dataframe
# recommend but not need to convert dataframe to tibble to use tidyverse
# tibbles are lazy data frames that do less
# tibbles don't change variable types or names
# tibbles complain more (e.g. when a variable doesn't exist)
# tibble displays data along with data type while displaying 
# whereas data frames do not

MyWrangledData

dplyr::glimpse(MyWrangledData) 

dplyr::filter(MyWrangledData, Count>100) # ≈ subset(), but nicer!

dplyr::slice(MyWrangledData, 10:15) # Look at an arbitrary set of data rows

**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00874s

======================================================================
Inspecting script file Vectorize2.R...

File contents are:

**********************************************************************
# Runs the stochastic Ricker equation with gaussian fluctuations

rm(list = ls()) # Clean the workplace

stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{

  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix

  N[1, ] <- p0

  for (pop in 1:length(p0)) { #loop through the populations

    for (yr in 2:numyears){ #for each pop, loop through the years

      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)

}

# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 

stochrickvetor1 <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))
  N[1, ] <- p0
  for (yr in 2:numyears){ #for each pop, loop through the years
    N[yr,] <- N[yr-1,] * exp(r * (1 - N[yr - 1,] / K) + rnorm(1,0,sigma)) # add one fluctuation from normal distribution
 }
return(N)
}
stochrickvetor1()

stochrickvetor2 <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, 1000)
  N[1, ] <- p0
  for (pop in 2:1000){ #loop through the populations
    N[,pop] <- N[,pop-1] * exp(r * (1 - N[,pop-1] / K) + rnorm(1,0,sigma))
  }
return(N)
}
stochrickvetor2()

print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
print("Vectorized Stochastic Ricker1 takes:")
print(system.time(res21<-stochrickvect1()))
print("Vectorized Stochastic Ricker2 takes:")
print(system.time(res21<-stochrickvect2()))
**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 


**********************************************************************
            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
  [1,] 1.1955652 1.0526476 1.0851157 1.1556538 0.7936510 0.7716700 0.7958512
  [2,] 1.1397583 1.1912543 1.1810728 1.1557588 1.2255414 1.2234480 1.2256985
  [3,] 1.0318829 1.0138760 1.0175673 1.0264697 1.0010125 1.0018161 1.0009521
  [4,] 0.9675865 0.9714682 0.9706958 0.9687833 0.9740631 0.9739055 0.9740750
  [5,] 0.8751771 0.8746046 0.8747196 0.8750020 0.8742143 0.8742382 0.8742125
  [6,] 0.7687159 0.7687410 0.7687359 0.
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in stochrickvect1() : could not find function "stochrickvect1"
Calls: print -> system.time
Timing stopped at: 0 0 0.001
Execution halted

======================================================================
Inspecting script file preallocation.R...

File contents are:

**********************************************************************
# for loop that resizes a vector repeatedly

NoPreallocFun <- function(x) {
  a <- vector() # empty vector
  for (i in 1:x) {
    a <- c(a, i) # concatenate
    print(a)
    print(object.size(a))
  }
}

system.time(NoPreallocFun(10))

# if you “pre-allocate” a vector that fits all the values, R doesn’t have to 
# re-allocate memory each iteration

PreallocFun <- function(x) {
  a <- rep(NA, x) # pre-allocated vector
  for (i in 1:x) {
    a[i] <- i # assign
    print(a)
    print(object.size(a))
  }
}

system.time(PreallocFun(10))

**********************************************************************

Testing preallocation.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
56 bytes
[1] 1 2
56 bytes
[1] 1 2 3
64 bytes
[1] 1 2 3 4
64 bytes
[1] 1 2 3 4 5
80 bytes
[1] 1 2 3 4 5 6
80 bytes
[1] 1 2 3 4 5 6 7
80 bytes
[1] 1 2 3 4 5 6 7 8
80 bytes
[1] 1 2 3 4 5 6 7 8 9
96 bytes
 [1]  1  2  3  4  5  6  7  8  9 10
96 bytes
   user  system elapsed 
  0.046   0.005   0.052 
 [1]  1 NA NA NA NA NA NA NA NA NA
96 bytes
 [1]  1  2 NA NA NA NA NA NA NA NA
96 bytes
 [1]  1  2  3 NA NA NA NA NA NA NA
96 bytes
 [1]  1  2  3  4 NA NA NA NA NA NA
96 bytes
 [1]  1  2  3  4  5 NA N
**********************************************************************

Code ran without errors

Time consumed = 0.58550s

======================================================================
Inspecting script file SQLinR.R...

File contents are:

**********************************************************************
#install the sqlite package
install.packages('sqldf')

# To load the packages
library(sqldf)

# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')

# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")

# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data

 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")


# Once we have our table, we can query the results using:

dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")


# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.

Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R

# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)

# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table

# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames



**********************************************************************

Testing SQLinR.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Installing package into ‘/usr/local/lib/R/site-library’
(as ‘lib’ is unspecified)
Warning in install.packages("sqldf") :
  'lib = "/usr/local/lib/R/site-library"' is not writable
Error in install.packages("sqldf") : unable to install packages
Execution halted

======================================================================
Inspecting script file PP_Dists.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: PP_Dists.R
# Created: Oct 2020


# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

require(tidyverse)

# launch R and read in these data to a data frame (note the relative path):
MyDF = read.csv("../data/EcolArchives-E089-51-D1.csv")
# use dplyr package to columns run down the page, and data runs across, ≈ str()
dplyr::glimpse(MyDF)

# change the type of certain columns to factor because we will want to use them as grouping variables:
MyDF$Type.of.feeding.interaction = as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location = as.factor(MyDF$Location)

# convert masses from mg to g
for (i in 1:nrow(MyDF)){
  if (MyDF$Prey.mass.unit[i] == "mg"){
    MyDF$Prey.mass.unit[i] = "g"
    MyDF$Prey.mass[i] = MyDF$Prey.mass[i] / 1000
 }
}

# Calculating size ratio
Size.ratio = log(MyDF$Prey.mass/MyDF$Predator.mass)
MyDF$Size.ratio <- Size.ratio # Create a new column for later results
MyDF$Size.ratio = as.numeric(MyDF$Size.ratio) # Creates or coerces objects of type "numeric". 

# calculating body size stats by feeding type
MyDFinsectivorous <- subset(MyDF, MyDF$Type.of.feeding.interaction == "insectivorous")
MyDFpiscivorous <- subset(MyDF, MyDF$Type.of.feeding.interaction == "piscivorous")
MyDFplanktivorous <- subset(MyDF, MyDF$Type.of.feeding.interaction == "planktivorous")
MyDFpredacious <- subset(MyDF, MyDF$Type.of.feeding.interaction == "predacious")
MyDFpredaciouspiscivorous <- subset(MyDF, MyDF$Type.of.feeding.interaction == "predacious/piscivorous")

# creating predator mass histograms
pdf("../results/Pred_Subplots.pdf", 11.7, 8.3)

par(mfcol=c(5,1)) # initialise multi-paneled plot

par(mfg=c(1,1)) # first sub-plot
hist(log10(MyDFinsectivorous$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - insectivorous")
par(mfg=c(2,1)) # second sub-plot + 
hist(log10(MyDFpiscivorous$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - piscivorous")
par(mfg=c(3,1)) # second sub-plot
hist(log10(MyDFplanktivorous$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - planktivorous")
par(mfg=c(4,1)) # second sub-plot
hist(log10(MyDFpredacious$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - predacious")
par(mfg=c(5,1)) # second sub-plot
hist(log10(MyDFpredaciouspiscivorous$Predator.mass), xlab="log10(Predator mass(g))", ylab="Count", main="Predator mass histogram - predacious/piscivorous")

dev.off()

# creating prey mass histograms
pdf("../results/Prey_Subplots.pdf", 11.7, 8.3)

par(mfcol=c(5,1)) # initialise multi-paneled plot

par(mfg=c(1,1)) # first sub-plot
hist(log10(MyDFinsectivorous$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - insectivorous")
par(mfg=c(2,1)) # second sub-plot
hist(log10(MyDFpiscivorous$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - piscivorous")
par(mfg=c(3,1)) # second sub-plot
hist(log10(MyDFplanktivorous$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - planktivorous")
par(mfg=c(4,1)) # second sub-plot
hist(log10(MyDFpredacious$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - predacious")
par(mfg=c(5,1)) # second sub-plot
hist(log10(MyDFpredaciouspiscivorous$Prey.mass), xlab="log10(Prey mass(g))", ylab="Count", main="Prey mass histogram - predacious/piscivorous")

dev.off()

# creating size ratio histograms
pdf("../results/SizeRatio_Subplots.pdf", 11.7, 8.3)
par(mfcol=c(5,1)) # initialise multi-paneled plot

par(mfg=c(1,1)) # first sub-plot
plot(density(MyDFinsectivorous$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - insectivorous")
par(mfg=c(2,1)) # second sub-plot
plot(density(MyDFpiscivorous$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - piscivorous")
par(mfg=c(3,1)) # second sub-plot
plot(density(MyDFplanktivorous$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - planktivorous")
par(mfg=c(4,1)) # second sub-plot
plot(density(MyDFpredacious$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - predacious")
par(mfg=c(5,1)) # second sub-plot
plot(density(MyDFpredaciouspiscivorous$Size.ratio), type = "l", xlab="log(Size ratio)", ylab="Density", main="Size ratio - predacious/piscivorous")

dev.off()

# create the pp_results.csv
stats <- MyDF %>%
  group_by(Type.of.feeding.interaction) %>%
  summarise(mean(log(Predator.mass)),
            median(log(Predator.mass)),
            mean(log(Prey.mass)),
            median(log(Prey.mass)),
            mean(log(Prey.mass / Predator.mass)),
            median(log(Prey.mass / Predator.mass)))
# name the columns
names(stats) <- c("Type.of.feeding.interaction",
                  "Mean.log.predator.mass",
                  "Median.log.predator.mass",
                  "Mean.log.prey.mass",
                  "Median.log.prey.mass",
                  "Mean.log.ratio.prey.predator.mass",
                  "Median.log.ratio.prey.predator.mass")
# write to csv
write.csv(stats, "../Results/PP_Results.csv", row.names = F)

**********************************************************************

Testing PP_Dists.R...

Output (only first 500 characters): 


**********************************************************************
Rows: 34,931
Columns: 15
$ Record.number               <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…
$ In.refID                    <chr> "ATSH063", "ATSH080", "ATSH089", "ATSH143"…
$ IndividualID                <chr> "1", "2", "3", "4", "5", "6", "7", "8", "9…
$ Predator                    <chr> "Rhizoprionodon terraenovae", "Rhizopriono…
$ Predator.common.name        <chr> "Atlantic sharpnose shark", "Atlantic shar…
$ Predator.taxon              <chr> "ectotherm vertebrate", "ectotherm verte
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: tidyverse
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.5
✔ tibble  3.1.8     ✔ dplyr   1.0.8
✔ tidyr   1.2.0     ✔ stringr 1.4.1
✔ readr   2.1.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
Calls: write.csv -> eval.parent -> eval -> eval -> <Anonymous> -> file
In addition: Warning message:
In file(file, ifelse(append, "a", "w")) :
  cannot open file '../Results/PP_Results.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file try.R...

File contents are:

**********************************************************************
doit <- function(x) {
  temp_x <- sample(x, replace = TRUE)
  if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
    print(paste("Mean of this sample was:", as.character(mean(temp_x))))
  } 
  else {
    stop("Couldn't calculate mean: too few unique values!")
  }
}
**********************************************************************

Testing try.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.44673s

======================================================================
Inspecting script file MyBars.R...

File contents are:

**********************************************************************
## Annotating Plots ##
# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# use the ggplot geom text to annotate a plot:
a <- read.table("../data/Results.txt", header = TRUE)
# check the data
head(a)

a$ymin <- rep(0, dim(a)[1]) # append a column of zeros

# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y1,
  size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)

# Print the second linerange
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y2,
  size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)

# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y3,
  size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)

# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))

# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
                            breaks = seq(3, 5, by = 0.05)) + 
  scale_y_continuous("My y axis") + 
  theme_bw() + 
  theme(legend.position = "none") 
p

# Print the plot
print(p)
# Save the plot as pdf file
ggsave("MyBars.pdf", path = "../results/")

**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 


**********************************************************************
         x   y1   y2 y3 Label
1 3.515424 4320 4320  0  <NA>
2 3.533984 2160 2160  0  <NA>
3 3.557647 4320 4320  0  <NA>
4 3.569953 4320 4320  0  <NA>
5 3.578984 8640 8640  0  <NA>
6 3.585665 2160 2160  0  <NA>

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(a) : could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file Ricker.R...

File contents are:

**********************************************************************
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
  # Runs a simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}

plot(Ricker(generations=10), type="l")
**********************************************************************

Testing Ricker.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.57486s

======================================================================
Inspecting script file break.R...

File contents are:

**********************************************************************
i <- 0
while (i < Inf) {
  if (i == 10){
    break
  } else {
    cat("i equals ", i, "\n")
    i <- i + 1
  }
}


**********************************************************************

Testing break.R...

Output (only first 500 characters): 


**********************************************************************
i equals  0 
i equals  1 
i equals  2 
i equals  3 
i equals  4 
i equals  5 
i equals  6 
i equals  7 
i equals  8 
i equals  9 

**********************************************************************

Code ran without errors

Time consumed = 0.46828s

======================================================================
Inspecting script file apply1.R...

File contents are:

**********************************************************************
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)

## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)
**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 


**********************************************************************
 [1]  0.284067756  0.263880001 -0.105293490 -0.578254261 -0.003434956
 [6]  0.023833896  0.468664232  0.348726172 -0.317109183  0.007172211
 [1] 1.0689996 1.4057889 1.2199771 0.5713524 0.9173379 1.2404718 0.6748119
 [8] 0.3257420 1.5537353 2.0302566
 [1]  0.28514363 -0.04078558  0.07658113  0.35790065  0.02193511 -0.09461969
 [7] -0.34987779 -0.19201248  0.81556263 -0.48757525

**********************************************************************

Code ran without errors

Time consumed = 0.38935s

======================================================================
Inspecting script file basic_io.R...

File contents are:

**********************************************************************
# A simple script to illustrate R input-output.  
# Run line by line and check inputs outputs to understand what is happening  

MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers

write.csv(MyData, "../results/MyData.csv") #write it out as a new file

write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE, col.names = FALSE) # Append to it

write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names

write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.37038s

======================================================================
Inspecting script file DataWrang.R...

File contents are:

**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
#head(MyWrangledData); tail(MyWrangledData)

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

########################################## In-class practical ##################
#require(tidyverse)
#tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well 
#
## convert the dataframe to a "tibble"
#MyWrangledData <- dplyr::as_tibble(MyWrangledData) 
#MyWrangledData
#
## Same as:
#MyWrangledData <- as_tibble(MyWrangledData) 
#class(MyWrangledData)
#
## Without using ::
#glimpse(MyWrangledData) #like str(), but nicer!
#
## utils::View(MyWrangledData) #same as fix()
#filter(MyWrangledData, Count>100) #like subset(), but nicer!
#
#slice(MyWrangledData, 10:15) # Look at a particular range of data rows
#
##  using tidyverse is using the “pipe” %>% operator to create a compact sequence 
## of manipulations of dataset with dplyr:
#MyWrangledData %>%
#  group_by(Species) %>%
#  summarise(avg = mean(Count))
#
## the same as the following command using base R (not using dplyr at all):
#aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean) 
################################################################################


############# Exploring the data (extend the script below)  ###############
require(tidyverse)
tidyverse_packages(include_self = T)
tibble::as_tibble(MyWrangledData)
dplyr::glimpse(MyWrangledData) # dbl means double precision floating point number
dplyr::filter(MyWrangledData, Count>100)
dplyr::slice(MyWrangledData,10:15)

**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00906s

======================================================================
Inspecting script file plotLin.R...

File contents are:

**********************************************************************
## Mathematical display ##

# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# create some linear regression "data"
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                   parse = TRUE, size = 6, 
                   colour = "blue")

p

# Save the plot as pdf file
ggsave("MyLinReg.pdf", path = "../results/")

**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(my_data, aes(x = x, y = y, colour = abs(my_lm$residual))) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file GPDD_Data.R...

File contents are:

**********************************************************************
# Author: Anqi Wang (aw222@ic.ac.uk)
# Script: GPDD_Data.R
# Created: Oct 2020


# clean environment and remove all the previous plots
rm(list=ls())
graphics.off()

# install the maps package
install.packages("maps")

# load the required package
library(maps)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)

# load the data
load("../data/GPDDFiltered.RData")
#class(df) 

# create a world map
world_map = map_data("world")
p = ggplot() + coord_fixed() + xlab("") + ylab("")
world = p + borders("world", colour = "grey 50", fill = "grey 100") +
  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  geom_point(data = gpdd, aes(x = long, y = lat), color = "black", shape = I(3), alpha = I(0.5))

world

# what biases might you expect in any analysis based on the data represented?
# # The data locations spreads more along the seaside, and not evenly distributed, 
# more focused on the northern temperate zone,
# therefore, for the terrestrial and freshwater habitats, or the other temperature zones may not accurate due to the lack of data


**********************************************************************

Testing GPDD_Data.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Installing package into ‘/usr/local/lib/R/site-library’
(as ‘lib’ is unspecified)
Warning in install.packages("maps") :
  'lib = "/usr/local/lib/R/site-library"' is not writable
Error in install.packages("maps") : unable to install packages
Execution halted

======================================================================
Inspecting script file Florida.R...

File contents are:

**********************************************************************
#################################
## Is Florida getting warmer? ##
#################################
# Calculate the correlation coefficients between temperature and time
# Use a permutation analysis to generate a distribution of random correlation coefficients 
# Compare the observed coefficient with this random distribution

rm(list = ls()) # Clear the workplace
# calculate the correlation coefficients between temperature and time
load("../data/KeyWestAnnualMeanTemperature.RData") # load the datast
ls()

class(ats) #return the values of the class attribute 
head(ats) # display the first n rows present in the input data frame
plot(ats) # plot the graph of ats

# Compute the appropriate correlation coefficient between years and Temperature and store it
library(tidyverse) # launch tidyverse
corcoeff <- cor(ats$Year, ats$Temp)#, method = "kendall") # Calculate the correlation coefficient
plot(ats, main = "The correlation coefficent between temperature and yeat")

print("Correlation coefficient for Year and Temp is:")
print (corcoeff)

# Repeat this calculation a sufficient number of times, and recalculating the correlation coefficient (and storing it)
# Each time randomly reshuffling the temperatures 

# create an empty vector to hold the coefficients of sampled populations
allcoeffs = c()
for (i in 1:1000){ #shuffles and calculates 1000 times
  tempsample = sample(ats$Temp) # creates a shuffled sample of the temperatures
  newcoeff <- cor(ats$Year, tempsample)#, method = "kendall") # calculates correlation coefficient of years and shuffled temperatures
  allcoeffs = c(allcoeffs, newcoeff) # stores all coefficients in a vector
}

# Calculate what fraction of the random correlation coefficients were greater than the observed one
# This is the approximate, asymptotic p-value
AsyPValue <- allcoeffs[allcoeffs>corcoeff]
print("The Approximate, asymptomatic p-value is:")
print(AsyPValue/allcoeffs)

# create figures
pdf("../results/atsplot.pdf")
plot(ats, main = "Temperature records by Year in Key West, Florida, USA")
dev.off()

pdf("../results/allcoeffs.pdf")
plot(allcoeffs, main = "Year vs. Temperature in Key West, Florida, USA", ylab = "Correlation coefficient")
dev.off()


pdf("../results/AsymptoticPValue.pdf")
hist(allcoeffs, main = "Permutation Analysis", xlab = "Correlation Coefficient")
dev.off()
# All values between 0.5.. and  -0.5.. were taken due to the hypothesis is:
# is Florida getting warmer? Which means the specified thing to considered is 
# whether there is a positive correlation
# If hypotheses is changed to whether Florida temperature is changing, 
# the value greater than |0.5..| (absolute value of 0.5..)should all be considered
# If hypothesis was is Florida getting colder, 
# the allcoeff may valued the all numbers below the observed ones


**********************************************************************

Testing Florida.R...

Output (only first 500 characters): 


**********************************************************************
[1] "ats"
[1] "data.frame"
  Year     Temp
1 1901 23.75000
2 1902 24.66667
3 1903 24.71667
4 1904 24.51667
5 1905 24.88333
6 1906 24.63333
[1] "Correlation coefficient for Year and Temp is:"
[1] 0.5331784
[1] "The Approximate, asymptomatic p-value is:"
numeric(0)
pdf 
  2 
pdf 
  2 
pdf 
  2 

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.5
✔ tibble  3.1.8     ✔ dplyr   1.0.8
✔ tidyr   1.2.0     ✔ stringr 1.4.1
✔ readr   2.1.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()

======================================================================
Inspecting script file next.R...

File contents are:

**********************************************************************
for (i in 1:10) {
  if((i %% 2) == 0)
    next
  print(i)
}
**********************************************************************

Testing next.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.43151s

======================================================================
Inspecting script file sample.R...

File contents are:

**********************************************************************
######### Functions ##########

## A function to take a sample of size n from a population "popn" and return its mean
myexperiment <- function(popn,n) {
  pop_sample <- sample(popn, n, replace = FALSE)
  return(mean(pop_sample))
}

## Calculate means using a FOR loop on a vector without preallocation:
loopy_sample1 <- function(popn, n, num) {
  result1 <- vector() #Initialize empty vector of size 1 
  for(i in 1:num) {
    result1 <- c(result1, myexperiment(popn, n))
  }
  return(result1)
}

## To run "num" iterations of the experiment using a FOR loop on a vector with preallocation:
loopy_sample2 <- function(popn, n, num) {
  result2 <- vector(,num) #Preallocate expected size
  for(i in 1:num) {
    result2[i] <- myexperiment(popn, n)
  }
  return(result2)
}

## To run "num" iterations of the experiment using a FOR loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num) {
  result3 <- vector("list", num) #Preallocate expected size
  for(i in 1:num) {
    result3[[i]] <- myexperiment(popn, n)
  }
  return(result3)
}


## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num) {
  result4 <- lapply(1:num, function(i) myexperiment(popn, n))
  return(result4)
}

## To run "num" iterations of the experiment using vectorization with sapply:
sapply_sample <- function(popn, n, num) {
  result5 <- sapply(1:num, function(i) myexperiment(popn, n))
  return(result5)
}

set.seed(12345)
popn <- rnorm(10000) # Generate the population
hist(popn)

n <- 100 # sample size for each experiment
num <- 10000 # Number of times to rerun the experiment

print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))

print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))

print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))

print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))

print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))


# tapply function
x <- 1:20 # a vector
x
# a factor type variable
y <- factor(rep(letters[1:5], each = 4)) 
y
# add up the values in x
tapply(x, y, sum)


# the by function
attach(iris)
iris
# colMeans function
by(iris[,1:2], iris$Species, colMeans)
by(iris[,1:2], iris$Petal.Width, colMeans)


# replicate
replicate(10, runif(5))
**********************************************************************

Testing sample.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops without preallocation on a vector took:"
   user  system elapsed 
  0.553   0.033   0.587 
[1] "Using loops with preallocation on a vector took:"
   user  system elapsed 
   0.48    0.00    0.48 
[1] "Using loops with preallocation on a list took:"
   user  system elapsed 
  0.448   0.000   0.450 
[1] "Using the vectorized sapply function (on a list) took:"
   user  system elapsed 
  0.436   0.000   0.437 
[1] "Using the vectorized lapply function (on a list) took:"
   user  syst
**********************************************************************

Code ran without errors

Time consumed = 3.06763s

======================================================================
Inspecting script file R_conditionals.R...

File contents are:

**********************************************************************
# Check if an integer is even
is.even <- function(n = 2){
  if (n %% 2 == 0) {
    return(paste(n, "is even!"))
  } else {
  return(paste(n, "is odd!"))
  }
}

is.even(6)

# Checks if a number is a power of 2
is.power2 <- function(n = 2) {
  if (log2(n) %% 1==0) {
    return(paste(n, 'is a power of 2!'))
  } else {
    return(paste(n,'is not a power of 2!'))
  }
}

is.power2(4)

# Checks if a number is prime
is.prime <- function(n) {
  if (n==0) {
    return(paste(n,'is a zero!'))
  } else if (n==1) {
    return(paste(n,'is just a unit!'))
  }
  
  ints <- 2:(n-1)
  
  if (all(n%%ints!=0)) {
    return(paste(n,'is a prime!'))
  } else {
    return(paste(n,'is a composite!'))
  }
}

is.prime(3)
**********************************************************************

Testing R_conditionals.R...

Output (only first 500 characters): 


**********************************************************************
[1] "6 is even!"
[1] "4 is a power of 2!"
[1] "3 is a prime!"

**********************************************************************

Code ran without errors

Time consumed = 0.39989s

======================================================================
======================================================================
Finished running scripts

Ran into 10 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!